{"author": "odoo", "code": "# -*- coding: utf-8 -*-\nimport pprint\nimport logging\nfrom werkzeug import urls, utils\n\nfrom odoo import http, _\nfrom odoo.http import request\nfrom odoo.exceptions import ValidationError\n\n_logger = logging.getLogger(__name__)\n\n\nclass AuthorizeController(http.Controller):\n    _return_url = '/payment/authorize/return/'\n    _cancel_url = '/payment/authorize/cancel/'\n\n    @http.route([\n        '/payment/authorize/return/',\n        '/payment/authorize/cancel/',\n    ], type='http', auth='public', csrf=False)\n    def authorize_form_feedback(self, **post):\n        _logger.info('Authorize: entering form_feedback with post data %s', pprint.pformat(post))\n        return_url = '/'\n        if post:\n            request.env['payment.transaction'].sudo().form_feedback(post, 'authorize')\n            return_url = post.pop('return_url', '/')\n        base_url = request.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        \n        \n        \n        return request.render('payment_authorize.payment_authorize_redirect', {\n            'return_url': urls.url_join(base_url, return_url)\n        })\n\n    @http.route(['/payment/authorize/s2s/create_json'], type='json', auth='public')\n    def authorize_s2s_create_json(self, **kwargs):\n        acquirer_id = int(kwargs.get('acquirer_id'))\n        acquirer = request.env['payment.acquirer'].browse(acquirer_id)\n        if not kwargs.get('partner_id'):\n            kwargs = dict(kwargs, partner_id=request.env.user.partner_id.id)\n        return acquirer.s2s_process(kwargs).id\n\n    @http.route(['/payment/authorize/s2s/create_json_3ds'], type='json', auth='public', csrf=False)\n    def authorize_s2s_create_json_3ds(self, verify_validity=False, **kwargs):\n        token = False\n        acquirer = request.env['payment.acquirer'].browse(int(kwargs.get('acquirer_id')))\n        \n        try:\n            if not kwargs.get('partner_id'):\n                kwargs = dict(kwargs, partner_id=request.env.user.partner_id.id)\n            token = acquirer.s2s_process(kwargs)\n        except ValidationError as e:\n            message = e.args[0]\n            if isinstance(message, dict) and 'missing_fields' in message:\n                msg = _(\"The transaction cannot be processed because some contact details are missing or invalid: \")\n                message = msg + ', '.join(message['missing_fields']) + '. '\n                if request.env.user._is_public():\n                    message += _(\"Please sign in to complete your profile.\")\n                    \n                    if request.env['ir.config_parameter'].sudo().get_param('auth_signup.allow_uninvited', 'False').lower() == 'false':\n                        message += _(\"If you don't have any account, please ask your salesperson to update your profile. \")\n                else:\n                    message += _(\"Please complete your profile. \")\n\n            return {\n                'error': message\n            }\n\n        if not token:\n            res = {\n                'result': False,\n            }\n            return res\n\n        res = {\n            'result': True,\n            'id': token.id,\n            'short_name': token.short_name,\n            '3d_secure': False,\n            'verified': False,\n        }\n\n        if verify_validity != False:\n            token.validate()\n            res['verified'] = token.verified\n\n        return res\n\n    @http.route(['/payment/authorize/s2s/create'], type='http', auth='public')\n    def authorize_s2s_create(self, **post):\n        acquirer_id = int(post.get('acquirer_id'))\n        acquirer = request.env['payment.acquirer'].browse(acquirer_id)\n        acquirer.s2s_process(post)\n        return utils.redirect(post.get('return_url', '/'))\n", "comments": "      coding  utf 8        authorize net expecting response post sent server     this response form url authorize net pass    client browser redirect desired location need javascript     update message portal mode   b2b ", "content": "# -*- coding: utf-8 -*-\nimport pprint\nimport logging\nfrom werkzeug import urls, utils\n\nfrom odoo import http, _\nfrom odoo.http import request\nfrom odoo.exceptions import ValidationError\n\n_logger = logging.getLogger(__name__)\n\n\nclass AuthorizeController(http.Controller):\n    _return_url = '/payment/authorize/return/'\n    _cancel_url = '/payment/authorize/cancel/'\n\n    @http.route([\n        '/payment/authorize/return/',\n        '/payment/authorize/cancel/',\n    ], type='http', auth='public', csrf=False)\n    def authorize_form_feedback(self, **post):\n        _logger.info('Authorize: entering form_feedback with post data %s', pprint.pformat(post))\n        return_url = '/'\n        if post:\n            request.env['payment.transaction'].sudo().form_feedback(post, 'authorize')\n            return_url = post.pop('return_url', '/')\n        base_url = request.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        # Authorize.Net is expecting a response to the POST sent by their server.\n        # This response is in the form of a URL that Authorize.Net will pass on to the\n        # client's browser to redirect them to the desired location need javascript.\n        return request.render('payment_authorize.payment_authorize_redirect', {\n            'return_url': urls.url_join(base_url, return_url)\n        })\n\n    @http.route(['/payment/authorize/s2s/create_json'], type='json', auth='public')\n    def authorize_s2s_create_json(self, **kwargs):\n        acquirer_id = int(kwargs.get('acquirer_id'))\n        acquirer = request.env['payment.acquirer'].browse(acquirer_id)\n        if not kwargs.get('partner_id'):\n            kwargs = dict(kwargs, partner_id=request.env.user.partner_id.id)\n        return acquirer.s2s_process(kwargs).id\n\n    @http.route(['/payment/authorize/s2s/create_json_3ds'], type='json', auth='public', csrf=False)\n    def authorize_s2s_create_json_3ds(self, verify_validity=False, **kwargs):\n        token = False\n        acquirer = request.env['payment.acquirer'].browse(int(kwargs.get('acquirer_id')))\n        \n        try:\n            if not kwargs.get('partner_id'):\n                kwargs = dict(kwargs, partner_id=request.env.user.partner_id.id)\n            token = acquirer.s2s_process(kwargs)\n        except ValidationError as e:\n            message = e.args[0]\n            if isinstance(message, dict) and 'missing_fields' in message:\n                msg = _(\"The transaction cannot be processed because some contact details are missing or invalid: \")\n                message = msg + ', '.join(message['missing_fields']) + '. '\n                if request.env.user._is_public():\n                    message += _(\"Please sign in to complete your profile.\")\n                    # update message if portal mode = b2b\n                    if request.env['ir.config_parameter'].sudo().get_param('auth_signup.allow_uninvited', 'False').lower() == 'false':\n                        message += _(\"If you don't have any account, please ask your salesperson to update your profile. \")\n                else:\n                    message += _(\"Please complete your profile. \")\n\n            return {\n                'error': message\n            }\n\n        if not token:\n            res = {\n                'result': False,\n            }\n            return res\n\n        res = {\n            'result': True,\n            'id': token.id,\n            'short_name': token.short_name,\n            '3d_secure': False,\n            'verified': False,\n        }\n\n        if verify_validity != False:\n            token.validate()\n            res['verified'] = token.verified\n\n        return res\n\n    @http.route(['/payment/authorize/s2s/create'], type='http', auth='public')\n    def authorize_s2s_create(self, **post):\n        acquirer_id = int(post.get('acquirer_id'))\n        acquirer = request.env['payment.acquirer'].browse(acquirer_id)\n        acquirer.s2s_process(post)\n        return utils.redirect(post.get('return_url', '/'))\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "924ca14df9fdd280f87f61c2fd90dbbd", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/payment_authorize/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}