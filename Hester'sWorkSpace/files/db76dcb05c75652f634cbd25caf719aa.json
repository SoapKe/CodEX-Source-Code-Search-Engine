{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\nimport io\nimport os\nimport sys\nimport time\n\nimport numpy as np\nfrom six.moves import xrange\nimport tensorflow as tf\n\nimport model as cross_conv_model\nimport reader\n\nFLAGS = tf.flags.FLAGS\ntf.flags.DEFINE_string('log_root', '/tmp/moving_obj', 'The root dir of output.')\ntf.flags.DEFINE_string('data_filepattern',\n                       'est',\n                       'training data file pattern.')\ntf.flags.DEFINE_integer('batch_size', 1, 'Batch size.')\ntf.flags.DEFINE_integer('image_size', 64, 'Image height and width.')\ntf.flags.DEFINE_float('norm_scale', 1.0, 'Normalize the original image')\ntf.flags.DEFINE_float('scale', 10.0,\n                      'Scale the image after norm_scale and move the diff '\n                      'to the positive realm.')\ntf.flags.DEFINE_integer('sequence_length', 2, 'tf.SequenceExample length.')\ntf.flags.DEFINE_integer('eval_batch_count', 100,\n                        'Average the result this number of examples.')\ntf.flags.DEFINE_bool('l2_loss', True, 'If true, include l2_loss.')\ntf.flags.DEFINE_bool('reconstr_loss', False, 'If true, include reconstr_loss.')\ntf.flags.DEFINE_bool('kl_loss', True, 'If true, include KL loss.')\n\nslim = tf.contrib.slim\n\n\ndef _Eval():\n  params = dict()\n  params['batch_size'] = FLAGS.batch_size\n  params['seq_len'] = FLAGS.sequence_length\n  params['image_size'] = FLAGS.image_size\n  params['is_training'] = False\n  params['norm_scale'] = FLAGS.norm_scale\n  params['scale'] = FLAGS.scale\n  params['l2_loss'] = FLAGS.l2_loss\n  params['reconstr_loss'] = FLAGS.reconstr_loss\n  params['kl_loss'] = FLAGS.kl_loss\n\n  eval_dir = os.path.join(FLAGS.log_root, 'eval')\n\n  images = reader.ReadInput(\n      FLAGS.data_filepattern, shuffle=False, params=params)\n  images *= params['scale']\n   Increase the value makes training much faster.\n  image_diff_list = reader.SequenceToImageAndDiff(images)\n  model = cross_conv_model.CrossConvModel(image_diff_list, params)\n  model.Build()\n\n  summary_writer = tf.summary.FileWriter(eval_dir)\n  saver = tf.train.Saver()\n  sess = tf.Session('', config=tf.ConfigProto(allow_soft_placement=True))\n  tf.train.start_queue_runners(sess)\n\n  while True:\n    time.sleep(60)\n    try:\n      ckpt_state = tf.train.get_checkpoint_state(FLAGS.log_root)\n    except tf.errors.OutOfRangeError as e:\n      sys.stderr.write('Cannot restore checkpoint: %s\\n' % e)\n      continue\n    if not (ckpt_state and ckpt_state.model_checkpoint_path):\n      sys.stderr.write('No model to eval yet at %s\\n' % FLAGS.log_root)\n      continue\n    sys.stderr.write('Loading checkpoint %s\\n' %\n                     ckpt_state.model_checkpoint_path)\n    saver.restore(sess, ckpt_state.model_checkpoint_path)\n     Use the empirical distribution of z from training set.\n    if not tf.gfile.Exists(os.path.join(FLAGS.log_root, 'z_mean.npy')):\n      sys.stderr.write('No z at %s\\n' % FLAGS.log_root)\n      continue\n\n    with tf.gfile.Open(os.path.join(FLAGS.log_root, 'z_mean.npy')) as f:\n      sample_z_mean = np.load(io.BytesIO(f.read()))\n    with tf.gfile.Open(\n        os.path.join(FLAGS.log_root, 'z_stddev_log.npy')) as f:\n      sample_z_stddev_log = np.load(io.BytesIO(f.read()))\n\n    total_loss = 0.0\n    for _ in xrange(FLAGS.eval_batch_count):\n      loss_val, total_steps, summaries = sess.run(\n          [model.loss, model.global_step, model.summary_op],\n          feed_dict={model.z_mean: sample_z_mean,\n                     model.z_stddev_log: sample_z_stddev_log})\n      total_loss += loss_val\n\n    summary_writer.add_summary(summaries, total_steps)\n    sys.stderr.write('steps: %d, loss: %f\\n' %\n                     (total_steps, total_loss / FLAGS.eval_batch_count))\n\n\ndef main(_):\n  _Eval()\n\n\nif __name__ == '__main__':\n  tf.app.run()\n", "comments": "   eval cross convolutional model        copyright 2016 the tensorflow authors all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       increase value makes training much faster     use empirical distribution z training set  ", "content": "# Copyright 2016 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"Eval Cross Convolutional Model.\"\"\"\nimport io\nimport os\nimport sys\nimport time\n\nimport numpy as np\nfrom six.moves import xrange\nimport tensorflow as tf\n\nimport model as cross_conv_model\nimport reader\n\nFLAGS = tf.flags.FLAGS\ntf.flags.DEFINE_string('log_root', '/tmp/moving_obj', 'The root dir of output.')\ntf.flags.DEFINE_string('data_filepattern',\n                       'est',\n                       'training data file pattern.')\ntf.flags.DEFINE_integer('batch_size', 1, 'Batch size.')\ntf.flags.DEFINE_integer('image_size', 64, 'Image height and width.')\ntf.flags.DEFINE_float('norm_scale', 1.0, 'Normalize the original image')\ntf.flags.DEFINE_float('scale', 10.0,\n                      'Scale the image after norm_scale and move the diff '\n                      'to the positive realm.')\ntf.flags.DEFINE_integer('sequence_length', 2, 'tf.SequenceExample length.')\ntf.flags.DEFINE_integer('eval_batch_count', 100,\n                        'Average the result this number of examples.')\ntf.flags.DEFINE_bool('l2_loss', True, 'If true, include l2_loss.')\ntf.flags.DEFINE_bool('reconstr_loss', False, 'If true, include reconstr_loss.')\ntf.flags.DEFINE_bool('kl_loss', True, 'If true, include KL loss.')\n\nslim = tf.contrib.slim\n\n\ndef _Eval():\n  params = dict()\n  params['batch_size'] = FLAGS.batch_size\n  params['seq_len'] = FLAGS.sequence_length\n  params['image_size'] = FLAGS.image_size\n  params['is_training'] = False\n  params['norm_scale'] = FLAGS.norm_scale\n  params['scale'] = FLAGS.scale\n  params['l2_loss'] = FLAGS.l2_loss\n  params['reconstr_loss'] = FLAGS.reconstr_loss\n  params['kl_loss'] = FLAGS.kl_loss\n\n  eval_dir = os.path.join(FLAGS.log_root, 'eval')\n\n  images = reader.ReadInput(\n      FLAGS.data_filepattern, shuffle=False, params=params)\n  images *= params['scale']\n  # Increase the value makes training much faster.\n  image_diff_list = reader.SequenceToImageAndDiff(images)\n  model = cross_conv_model.CrossConvModel(image_diff_list, params)\n  model.Build()\n\n  summary_writer = tf.summary.FileWriter(eval_dir)\n  saver = tf.train.Saver()\n  sess = tf.Session('', config=tf.ConfigProto(allow_soft_placement=True))\n  tf.train.start_queue_runners(sess)\n\n  while True:\n    time.sleep(60)\n    try:\n      ckpt_state = tf.train.get_checkpoint_state(FLAGS.log_root)\n    except tf.errors.OutOfRangeError as e:\n      sys.stderr.write('Cannot restore checkpoint: %s\\n' % e)\n      continue\n    if not (ckpt_state and ckpt_state.model_checkpoint_path):\n      sys.stderr.write('No model to eval yet at %s\\n' % FLAGS.log_root)\n      continue\n    sys.stderr.write('Loading checkpoint %s\\n' %\n                     ckpt_state.model_checkpoint_path)\n    saver.restore(sess, ckpt_state.model_checkpoint_path)\n    # Use the empirical distribution of z from training set.\n    if not tf.gfile.Exists(os.path.join(FLAGS.log_root, 'z_mean.npy')):\n      sys.stderr.write('No z at %s\\n' % FLAGS.log_root)\n      continue\n\n    with tf.gfile.Open(os.path.join(FLAGS.log_root, 'z_mean.npy')) as f:\n      sample_z_mean = np.load(io.BytesIO(f.read()))\n    with tf.gfile.Open(\n        os.path.join(FLAGS.log_root, 'z_stddev_log.npy')) as f:\n      sample_z_stddev_log = np.load(io.BytesIO(f.read()))\n\n    total_loss = 0.0\n    for _ in xrange(FLAGS.eval_batch_count):\n      loss_val, total_steps, summaries = sess.run(\n          [model.loss, model.global_step, model.summary_op],\n          feed_dict={model.z_mean: sample_z_mean,\n                     model.z_stddev_log: sample_z_stddev_log})\n      total_loss += loss_val\n\n    summary_writer.add_summary(summaries, total_steps)\n    sys.stderr.write('steps: %d, loss: %f\\n' %\n                     (total_steps, total_loss / FLAGS.eval_batch_count))\n\n\ndef main(_):\n  _Eval()\n\n\nif __name__ == '__main__':\n  tf.app.run()\n", "description": "Models and examples built with TensorFlow", "file_name": "eval.py", "id": "db76dcb05c75652f634cbd25caf719aa", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/research/next_frame_prediction/cross_conv/eval.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}