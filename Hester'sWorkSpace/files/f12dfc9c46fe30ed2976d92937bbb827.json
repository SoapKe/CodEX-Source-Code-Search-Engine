{"author": "nicolargo", "code": " -*- coding: utf-8 -*-\n\n This file is part of Glances.\n\n Copyright (C) 2017 Nicolargo <nicolas@nicolargo.com>\n\n Glances is free software; you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Glances is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n flake8: noqa\n pylint: skip-file\n\"\"\"Python 2/3 compatibility shims.\"\"\"\n\nimport operator\nimport sys\nimport unicodedata\nimport types\nimport platform\n\nPY_CYTHON = platform.python_implementation() == 'CPython'\nPY_PYPY = platform.python_implementation() == 'PyPy'\nPY_JYTHON = platform.python_implementation() == 'Jython'\nPY_IRON = platform.python_implementation() == 'IronPython'\nPY3 = sys.version_info[0] == 3\n\ntry:\n    from statistics import mean\nexcept ImportError:\n     Statistics is only available for Python 3.4 or higher\n    def mean(numbers):\n        return float(sum(numbers)) / max(len(numbers), 1)\n\nif PY3:\n    import queue\n    from configparser import ConfigParser, NoOptionError, NoSectionError\n    from xmlrpc.client import Fault, ProtocolError, ServerProxy, Transport, Server\n    from xmlrpc.server import SimpleXMLRPCRequestHandler, SimpleXMLRPCServer\n    from urllib.request import urlopen\n    from urllib.error import HTTPError, URLError\n    from urllib.parse import urlparse\n\n    input = input\n    range = range\n    map = map\n\n    text_type = str\n    binary_type = bytes\n    bool_type = bool\n\n    viewkeys = operator.methodcaller('keys')\n    viewvalues = operator.methodcaller('values')\n    viewitems = operator.methodcaller('items')\n\n    def to_ascii(s):\n        \"\"\"Convert the bytes string to a ASCII string\n        Usefull to remove accent (diacritics)\"\"\"\n        return str(s, 'utf-8')\n\n    def listitems(d):\n        return list(d.items())\n\n    def listkeys(d):\n        return list(d.keys())\n\n    def listvalues(d):\n        return list(d.values())\n\n    def iteritems(d):\n        return iter(d.items())\n\n    def iterkeys(d):\n        return iter(d.keys())\n\n    def itervalues(d):\n        return iter(d.values())\n\n    def u(s):\n        if isinstance(s, text_type):\n            return s\n        return s.decode('utf-8', 'replace')\n\n    def b(s):\n        if isinstance(s, binary_type):\n            return s\n        return s.encode('latin-1')\n\n    def nativestr(s):\n        if isinstance(s, text_type):\n            return s\n        return s.decode('utf-8', 'replace')\nelse:\n    import Queue as queue\n    from itertools import imap as map\n    from ConfigParser import SafeConfigParser as ConfigParser, NoOptionError, NoSectionError\n    from SimpleXMLRPCServer import SimpleXMLRPCRequestHandler, SimpleXMLRPCServer\n    from xmlrpclib import Fault, ProtocolError, ServerProxy, Transport, Server\n    from urllib2 import urlopen, HTTPError, URLError\n    from urlparse import urlparse\n\n    input = raw_input\n    range = xrange\n    ConfigParser.read_file = ConfigParser.readfp\n\n    text_type = unicode\n    binary_type = str\n    bool_type = types.BooleanType\n\n    viewkeys = operator.methodcaller('viewkeys')\n    viewvalues = operator.methodcaller('viewvalues')\n    viewitems = operator.methodcaller('viewitems')\n\n    def to_ascii(s):\n        \"\"\"Convert the unicode 's' to a ASCII string\n        Usefull to remove accent (diacritics)\"\"\"\n        if isinstance(s, binary_type):\n            return s\n        return unicodedata.normalize('NFKD', s).encode('ASCII', 'ignore')\n\n    def listitems(d):\n        return d.items()\n\n    def listkeys(d):\n        return d.keys()\n\n    def listvalues(d):\n        return d.values()\n\n    def iteritems(d):\n        return d.iteritems()\n\n    def iterkeys(d):\n        return d.iterkeys()\n\n    def itervalues(d):\n        return d.itervalues()\n\n    def u(s):\n        if isinstance(s, text_type):\n            return s\n        return s.decode('utf-8')\n\n    def b(s):\n        if isinstance(s, binary_type):\n            return s\n        return s.encode('utf-8', 'replace')\n\n    def nativestr(s):\n        if isinstance(s, binary_type):\n            return s\n        return s.encode('utf-8', 'replace')\n", "comments": "   python 2 3 compatibility shims      import operator import sys import unicodedata import types import platform  py cython   platform python implementation()     cpython  py pypy   platform python implementation()     pypy  py jython   platform python implementation()     jython  py iron   platform python implementation()     ironpython  py3   sys version info 0     3  try      statistics import mean except importerror        statistics available python 3 4 higher     def mean(numbers)          return float(sum(numbers))   max(len(numbers)  1)  py3      import queue     configparser import configparser  nooptionerror  nosectionerror     xmlrpc client import fault  protocolerror  serverproxy  transport  server     xmlrpc server import simplexmlrpcrequesthandler  simplexmlrpcserver     urllib request import urlopen     urllib error import httperror  urlerror     urllib parse import urlparse      input   input     range   range     map   map      text type   str     binary type   bytes     bool type   bool      viewkeys   operator methodcaller( keys )     viewvalues   operator methodcaller( values )     viewitems   operator methodcaller( items )      def ascii(s)             convert bytes string ascii string         usefull remove accent (diacritics)            return str(s   utf 8 )      def listitems(d)          return list(d items())      def listkeys(d)          return list(d keys())      def listvalues(d)          return list(d values())      def iteritems(d)          return iter(d items())      def iterkeys(d)          return iter(d keys())      def itervalues(d)          return iter(d values())      def u(s)          isinstance(s  text type)              return         return decode( utf 8    replace )      def b(s)          isinstance(s  binary type)              return         return encode( latin 1 )      def nativestr(s)          isinstance(s  text type)              return         return decode( utf 8    replace ) else      import queue queue     itertools import imap map     configparser import safeconfigparser configparser  nooptionerror  nosectionerror     simplexmlrpcserver import simplexmlrpcrequesthandler  simplexmlrpcserver     xmlrpclib import fault  protocolerror  serverproxy  transport  server     urllib2 import urlopen  httperror  urlerror     urlparse import urlparse      input   raw input     range   xrange     configparser read file   configparser readfp      text type   unicode     binary type   str     bool type   types booleantype      viewkeys   operator methodcaller( viewkeys )     viewvalues   operator methodcaller( viewvalues )     viewitems   operator methodcaller( viewitems )      def ascii(s)             convert unicode   ascii string         usefull remove accent (diacritics)           coding  utf 8           this file part glances        copyright (c) 2017 nicolargo  nicolas nicolargo com        glances free software  redistribute modify    terms gnu lesser general public license published    free software foundation  either version 3 license     (at option) later version        glances distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose  see    gnu lesser general public license details        you received copy gnu lesser general public license    along program  if  see  http   www gnu org licenses       flake8  noqa    pylint  skip file    statistics available python 3 4 higher ", "content": "# -*- coding: utf-8 -*-\n#\n# This file is part of Glances.\n#\n# Copyright (C) 2017 Nicolargo <nicolas@nicolargo.com>\n#\n# Glances is free software; you can redistribute it and/or modify\n# it under the terms of the GNU Lesser General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Glances is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# flake8: noqa\n# pylint: skip-file\n\"\"\"Python 2/3 compatibility shims.\"\"\"\n\nimport operator\nimport sys\nimport unicodedata\nimport types\nimport platform\n\nPY_CYTHON = platform.python_implementation() == 'CPython'\nPY_PYPY = platform.python_implementation() == 'PyPy'\nPY_JYTHON = platform.python_implementation() == 'Jython'\nPY_IRON = platform.python_implementation() == 'IronPython'\nPY3 = sys.version_info[0] == 3\n\ntry:\n    from statistics import mean\nexcept ImportError:\n    # Statistics is only available for Python 3.4 or higher\n    def mean(numbers):\n        return float(sum(numbers)) / max(len(numbers), 1)\n\nif PY3:\n    import queue\n    from configparser import ConfigParser, NoOptionError, NoSectionError\n    from xmlrpc.client import Fault, ProtocolError, ServerProxy, Transport, Server\n    from xmlrpc.server import SimpleXMLRPCRequestHandler, SimpleXMLRPCServer\n    from urllib.request import urlopen\n    from urllib.error import HTTPError, URLError\n    from urllib.parse import urlparse\n\n    input = input\n    range = range\n    map = map\n\n    text_type = str\n    binary_type = bytes\n    bool_type = bool\n\n    viewkeys = operator.methodcaller('keys')\n    viewvalues = operator.methodcaller('values')\n    viewitems = operator.methodcaller('items')\n\n    def to_ascii(s):\n        \"\"\"Convert the bytes string to a ASCII string\n        Usefull to remove accent (diacritics)\"\"\"\n        return str(s, 'utf-8')\n\n    def listitems(d):\n        return list(d.items())\n\n    def listkeys(d):\n        return list(d.keys())\n\n    def listvalues(d):\n        return list(d.values())\n\n    def iteritems(d):\n        return iter(d.items())\n\n    def iterkeys(d):\n        return iter(d.keys())\n\n    def itervalues(d):\n        return iter(d.values())\n\n    def u(s):\n        if isinstance(s, text_type):\n            return s\n        return s.decode('utf-8', 'replace')\n\n    def b(s):\n        if isinstance(s, binary_type):\n            return s\n        return s.encode('latin-1')\n\n    def nativestr(s):\n        if isinstance(s, text_type):\n            return s\n        return s.decode('utf-8', 'replace')\nelse:\n    import Queue as queue\n    from itertools import imap as map\n    from ConfigParser import SafeConfigParser as ConfigParser, NoOptionError, NoSectionError\n    from SimpleXMLRPCServer import SimpleXMLRPCRequestHandler, SimpleXMLRPCServer\n    from xmlrpclib import Fault, ProtocolError, ServerProxy, Transport, Server\n    from urllib2 import urlopen, HTTPError, URLError\n    from urlparse import urlparse\n\n    input = raw_input\n    range = xrange\n    ConfigParser.read_file = ConfigParser.readfp\n\n    text_type = unicode\n    binary_type = str\n    bool_type = types.BooleanType\n\n    viewkeys = operator.methodcaller('viewkeys')\n    viewvalues = operator.methodcaller('viewvalues')\n    viewitems = operator.methodcaller('viewitems')\n\n    def to_ascii(s):\n        \"\"\"Convert the unicode 's' to a ASCII string\n        Usefull to remove accent (diacritics)\"\"\"\n        if isinstance(s, binary_type):\n            return s\n        return unicodedata.normalize('NFKD', s).encode('ASCII', 'ignore')\n\n    def listitems(d):\n        return d.items()\n\n    def listkeys(d):\n        return d.keys()\n\n    def listvalues(d):\n        return d.values()\n\n    def iteritems(d):\n        return d.iteritems()\n\n    def iterkeys(d):\n        return d.iterkeys()\n\n    def itervalues(d):\n        return d.itervalues()\n\n    def u(s):\n        if isinstance(s, text_type):\n            return s\n        return s.decode('utf-8')\n\n    def b(s):\n        if isinstance(s, binary_type):\n            return s\n        return s.encode('utf-8', 'replace')\n\n    def nativestr(s):\n        if isinstance(s, binary_type):\n            return s\n        return s.encode('utf-8', 'replace')\n", "description": "Glances an Eye on your system. A top/htop alternative.", "file_name": "compat.py", "id": "f12dfc9c46fe30ed2976d92937bbb827", "language": "Python", "project_name": "glances", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nicolargo-glances/nicolargo-glances-c286362/glances/compat.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:40:41Z", "url": "https://github.com/nicolargo/glances", "wiki": true}