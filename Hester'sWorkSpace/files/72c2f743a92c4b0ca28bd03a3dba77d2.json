{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import ExtractorError\n\n\nclass Sport5IE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www|vod)?\\.sport5\\.co\\.il/.*\\b(?:Vi|docID)=(?P<id>\\d+)'\n    _TESTS = [\n        {\n            'url': 'http://vod.sport5.co.il/?Vc=147&Vi=176331&Page=1',\n            'info_dict': {\n                'id': 's5-Y59xx1-GUh2',\n                'ext': 'mp4',\n                'title': '\u05d5\u05dc\u05e0\u05e1\u05d9\u05d4-\u05e7\u05d5\u05e8\u05d3\u05d5\u05d1\u05d4 0:3',\n                'description': '\u05d0\u05dc\u05e7\u05d0\u05e1\u05e8, \u05d2\u05d0\u05d9\u05d9\u05d4 \u05d5\u05e4\u05d2\u05d5\u05dc\u05d9 \u05e1\u05d9\u05d3\u05e8\u05d5 \u05dc\u05e7\u05d1\u05d5\u05e6\u05d4 \u05e9\u05dc \u05e0\u05d5\u05e0\u05d5 \u05e0\u05d9\u05e6\u05d7\u05d5\u05df \u05e2\u05dc \u05e7\u05d5\u05e8\u05d3\u05d5\u05d1\u05d4 \u05d5\u05d0\u05ea \u05d4\u05de\u05e7\u05d5\u05dd \u05d4\u05e8\u05d0\u05e9\u05d5\u05df \u05d1\u05dc\u05d9\u05d2\u05d4',\n                'duration': 228,\n                'categories': list,\n            },\n            'skip': 'Blocked outside of Israel',\n        }, {\n            'url': 'http://www.sport5.co.il/articles.aspx?FolderID=3075&docID=176372&lang=HE',\n            'info_dict': {\n                'id': 's5-SiXxx1-hKh2',\n                'ext': 'mp4',\n                'title': 'GOALS_CELTIC_270914.mp4',\n                'description': '',\n                'duration': 87,\n                'categories': list,\n            },\n            'skip': 'Blocked outside of Israel',\n        }\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        media_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, media_id)\n\n        video_id = self._html_search_regex(r'clipId=([\\w-]+)', webpage, 'video id')\n\n        metadata = self._download_xml(\n            'http://sport5-metadata-rr-d.nsacdn.com/vod/vod/%s/HDS/metadata.xml' % video_id,\n            video_id)\n\n        error = metadata.find('./Error')\n        if error is not None:\n            raise ExtractorError(\n                '%s returned error: %s - %s' % (\n                    self.IE_NAME,\n                    error.find('./Name').text,\n                    error.find('./Description').text),\n                expected=True)\n\n        title = metadata.find('./Title').text\n        description = metadata.find('./Description').text\n        duration = int(metadata.find('./Duration').text)\n\n        posters_el = metadata.find('./PosterLinks')\n        thumbnails = [{\n            'url': thumbnail.text,\n            'width': int(thumbnail.get('width')),\n            'height': int(thumbnail.get('height')),\n        } for thumbnail in posters_el.findall('./PosterIMG')] if posters_el is not None else []\n\n        categories_el = metadata.find('./Categories')\n        categories = [\n            cat.get('name') for cat in categories_el.findall('./Category')\n        ] if categories_el is not None else []\n\n        formats = [{\n            'url': fmt.text,\n            'ext': 'mp4',\n            'vbr': int(fmt.get('bitrate')),\n            'width': int(fmt.get('width')),\n            'height': int(fmt.get('height')),\n        } for fmt in metadata.findall('./PlaybackLinks/FileURL')]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnails': thumbnails,\n            'duration': duration,\n            'categories': categories,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import ExtractorError\n\n\nclass Sport5IE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www|vod)?\\.sport5\\.co\\.il/.*\\b(?:Vi|docID)=(?P<id>\\d+)'\n    _TESTS = [\n        {\n            'url': 'http://vod.sport5.co.il/?Vc=147&Vi=176331&Page=1',\n            'info_dict': {\n                'id': 's5-Y59xx1-GUh2',\n                'ext': 'mp4',\n                'title': '\u05d5\u05dc\u05e0\u05e1\u05d9\u05d4-\u05e7\u05d5\u05e8\u05d3\u05d5\u05d1\u05d4 0:3',\n                'description': '\u05d0\u05dc\u05e7\u05d0\u05e1\u05e8, \u05d2\u05d0\u05d9\u05d9\u05d4 \u05d5\u05e4\u05d2\u05d5\u05dc\u05d9 \u05e1\u05d9\u05d3\u05e8\u05d5 \u05dc\u05e7\u05d1\u05d5\u05e6\u05d4 \u05e9\u05dc \u05e0\u05d5\u05e0\u05d5 \u05e0\u05d9\u05e6\u05d7\u05d5\u05df \u05e2\u05dc \u05e7\u05d5\u05e8\u05d3\u05d5\u05d1\u05d4 \u05d5\u05d0\u05ea \u05d4\u05de\u05e7\u05d5\u05dd \u05d4\u05e8\u05d0\u05e9\u05d5\u05df \u05d1\u05dc\u05d9\u05d2\u05d4',\n                'duration': 228,\n                'categories': list,\n            },\n            'skip': 'Blocked outside of Israel',\n        }, {\n            'url': 'http://www.sport5.co.il/articles.aspx?FolderID=3075&docID=176372&lang=HE',\n            'info_dict': {\n                'id': 's5-SiXxx1-hKh2',\n                'ext': 'mp4',\n                'title': 'GOALS_CELTIC_270914.mp4',\n                'description': '',\n                'duration': 87,\n                'categories': list,\n            },\n            'skip': 'Blocked outside of Israel',\n        }\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        media_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, media_id)\n\n        video_id = self._html_search_regex(r'clipId=([\\w-]+)', webpage, 'video id')\n\n        metadata = self._download_xml(\n            'http://sport5-metadata-rr-d.nsacdn.com/vod/vod/%s/HDS/metadata.xml' % video_id,\n            video_id)\n\n        error = metadata.find('./Error')\n        if error is not None:\n            raise ExtractorError(\n                '%s returned error: %s - %s' % (\n                    self.IE_NAME,\n                    error.find('./Name').text,\n                    error.find('./Description').text),\n                expected=True)\n\n        title = metadata.find('./Title').text\n        description = metadata.find('./Description').text\n        duration = int(metadata.find('./Duration').text)\n\n        posters_el = metadata.find('./PosterLinks')\n        thumbnails = [{\n            'url': thumbnail.text,\n            'width': int(thumbnail.get('width')),\n            'height': int(thumbnail.get('height')),\n        } for thumbnail in posters_el.findall('./PosterIMG')] if posters_el is not None else []\n\n        categories_el = metadata.find('./Categories')\n        categories = [\n            cat.get('name') for cat in categories_el.findall('./Category')\n        ] if categories_el is not None else []\n\n        formats = [{\n            'url': fmt.text,\n            'ext': 'mp4',\n            'vbr': int(fmt.get('bitrate')),\n            'width': int(fmt.get('width')),\n            'height': int(fmt.get('height')),\n        } for fmt in metadata.findall('./PlaybackLinks/FileURL')]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnails': thumbnails,\n            'duration': duration,\n            'categories': categories,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "sport5.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/sport5.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}