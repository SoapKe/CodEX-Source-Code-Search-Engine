{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    xpath_text,\n    xpath_element,\n    int_or_none,\n    parse_duration,\n)\n\n\nclass HBOBaseIE(InfoExtractor):\n    _FORMATS_INFO = {\n        'pro7': {\n            'width': 1280,\n            'height': 720,\n        },\n        '1920': {\n            'width': 1280,\n            'height': 720,\n        },\n        'pro6': {\n            'width': 768,\n            'height': 432,\n        },\n        '640': {\n            'width': 768,\n            'height': 432,\n        },\n        'pro5': {\n            'width': 640,\n            'height': 360,\n        },\n        'highwifi': {\n            'width': 640,\n            'height': 360,\n        },\n        'high3g': {\n            'width': 640,\n            'height': 360,\n        },\n        'medwifi': {\n            'width': 400,\n            'height': 224,\n        },\n        'med3g': {\n            'width': 400,\n            'height': 224,\n        },\n    }\n\n    def _extract_from_id(self, video_id):\n        video_data = self._download_xml(\n            'http://render.lv3.hbo.com/data/content/global/videos/data/%s.xml' % video_id, video_id)\n        title = xpath_text(video_data, 'title', 'title', True)\n\n        formats = []\n        for source in xpath_element(video_data, 'videos', 'sources', True):\n            if source.tag == 'size':\n                path = xpath_text(source, './/path')\n                if not path:\n                    continue\n                width = source.attrib.get('width')\n                format_info = self._FORMATS_INFO.get(width, {})\n                height = format_info.get('height')\n                fmt = {\n                    'url': path,\n                    'format_id': 'http%s' % ('-%dp' % height if height else ''),\n                    'width': format_info.get('width'),\n                    'height': height,\n                }\n                rtmp = re.search(r'^(?P<url>rtmpe?://[^/]+/(?P<app>.+))/(?P<playpath>mp4:.+)$', path)\n                if rtmp:\n                    fmt.update({\n                        'url': rtmp.group('url'),\n                        'play_path': rtmp.group('playpath'),\n                        'app': rtmp.group('app'),\n                        'ext': 'flv',\n                        'format_id': fmt['format_id'].replace('http', 'rtmp'),\n                    })\n                formats.append(fmt)\n            else:\n                video_url = source.text\n                if not video_url:\n                    continue\n                if source.tag == 'tarball':\n                    formats.extend(self._extract_m3u8_formats(\n                        video_url.replace('.tar', '/base_index_w8.m3u8'),\n                        video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n                elif source.tag == 'hls':\n                    m3u8_formats = self._extract_m3u8_formats(\n                        video_url.replace('.tar', '/base_index.m3u8'),\n                        video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False)\n                    for f in m3u8_formats:\n                        if f.get('vcodec') == 'none' and not f.get('tbr'):\n                            f['tbr'] = int_or_none(self._search_regex(\n                                r'-(\\d+)k/', f['url'], 'tbr', default=None))\n                    formats.extend(m3u8_formats)\n                elif source.tag == 'dash':\n                    formats.extend(self._extract_mpd_formats(\n                        video_url.replace('.tar', '/manifest.mpd'),\n                        video_id, mpd_id='dash', fatal=False))\n                else:\n                    format_info = self._FORMATS_INFO.get(source.tag, {})\n                    formats.append({\n                        'format_id': 'http-%s' % source.tag,\n                        'url': video_url,\n                        'width': format_info.get('width'),\n                        'height': format_info.get('height'),\n                    })\n        self._sort_formats(formats)\n\n        thumbnails = []\n        card_sizes = xpath_element(video_data, 'titleCardSizes')\n        if card_sizes is not None:\n            for size in card_sizes:\n                path = xpath_text(size, 'path')\n                if not path:\n                    continue\n                width = int_or_none(size.get('width'))\n                thumbnails.append({\n                    'id': width,\n                    'url': path,\n                    'width': width,\n                })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'duration': parse_duration(xpath_text(video_data, 'duration/tv14')),\n            'formats': formats,\n            'thumbnails': thumbnails,\n        }\n\n\nclass HBOIE(HBOBaseIE):\n    IE_NAME = 'hbo'\n    _VALID_URL = r'https?://(?:www\\.)?hbo\\.com/video/video\\.html\\?.*vid=(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.hbo.com/video/video.html?autoplay=true&g=u&vid=1437839',\n        'md5': '2c6a6bc1222c7e91cb3334dad1746e5a',\n        'info_dict': {\n            'id': '1437839',\n            'ext': 'mp4',\n            'title': 'Ep. 64 Clip: Encryption',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'duration': 1072,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self._extract_from_id(video_id)\n\n\nclass HBOEpisodeIE(HBOBaseIE):\n    IE_NAME = 'hbo:episode'\n    _VALID_URL = r'https?://(?:www\\.)?hbo\\.com/(?P<path>(?!video)(?:(?:[^/]+/)+video|watch-free-episodes)/(?P<id>[0-9a-z-]+))(?:\\.html)?'\n\n    _TESTS = [{\n        'url': 'http://www.hbo.com/girls/episodes/5/52-i-love-you-baby/video/ep-52-inside-the-episode.html?autoplay=true',\n        'md5': '61ead79b9c0dfa8d3d4b07ef4ac556fb',\n        'info_dict': {\n            'id': '1439518',\n            'display_id': 'ep-52-inside-the-episode',\n            'ext': 'mp4',\n            'title': 'Ep. 52: Inside the Episode',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'duration': 240,\n        },\n    }, {\n        'url': 'http://www.hbo.com/game-of-thrones/about/video/season-5-invitation-to-the-set.html?autoplay=true',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.hbo.com/watch-free-episodes/last-week-tonight-with-john-oliver',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        path, display_id = re.match(self._VALID_URL, url).groups()\n\n        content = self._download_json(\n            'http://www.hbo.com/api/content/' + path, display_id)['content']\n\n        video_id = compat_str((content.get('parsed', {}).get(\n            'common:FullBleedVideo', {}) or content['selectedEpisode'])['videoId'])\n\n        info_dict = self._extract_from_id(video_id)\n        info_dict['display_id'] = display_id\n\n        return info_dict\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    xpath_text,\n    xpath_element,\n    int_or_none,\n    parse_duration,\n)\n\n\nclass HBOBaseIE(InfoExtractor):\n    _FORMATS_INFO = {\n        'pro7': {\n            'width': 1280,\n            'height': 720,\n        },\n        '1920': {\n            'width': 1280,\n            'height': 720,\n        },\n        'pro6': {\n            'width': 768,\n            'height': 432,\n        },\n        '640': {\n            'width': 768,\n            'height': 432,\n        },\n        'pro5': {\n            'width': 640,\n            'height': 360,\n        },\n        'highwifi': {\n            'width': 640,\n            'height': 360,\n        },\n        'high3g': {\n            'width': 640,\n            'height': 360,\n        },\n        'medwifi': {\n            'width': 400,\n            'height': 224,\n        },\n        'med3g': {\n            'width': 400,\n            'height': 224,\n        },\n    }\n\n    def _extract_from_id(self, video_id):\n        video_data = self._download_xml(\n            'http://render.lv3.hbo.com/data/content/global/videos/data/%s.xml' % video_id, video_id)\n        title = xpath_text(video_data, 'title', 'title', True)\n\n        formats = []\n        for source in xpath_element(video_data, 'videos', 'sources', True):\n            if source.tag == 'size':\n                path = xpath_text(source, './/path')\n                if not path:\n                    continue\n                width = source.attrib.get('width')\n                format_info = self._FORMATS_INFO.get(width, {})\n                height = format_info.get('height')\n                fmt = {\n                    'url': path,\n                    'format_id': 'http%s' % ('-%dp' % height if height else ''),\n                    'width': format_info.get('width'),\n                    'height': height,\n                }\n                rtmp = re.search(r'^(?P<url>rtmpe?://[^/]+/(?P<app>.+))/(?P<playpath>mp4:.+)$', path)\n                if rtmp:\n                    fmt.update({\n                        'url': rtmp.group('url'),\n                        'play_path': rtmp.group('playpath'),\n                        'app': rtmp.group('app'),\n                        'ext': 'flv',\n                        'format_id': fmt['format_id'].replace('http', 'rtmp'),\n                    })\n                formats.append(fmt)\n            else:\n                video_url = source.text\n                if not video_url:\n                    continue\n                if source.tag == 'tarball':\n                    formats.extend(self._extract_m3u8_formats(\n                        video_url.replace('.tar', '/base_index_w8.m3u8'),\n                        video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n                elif source.tag == 'hls':\n                    m3u8_formats = self._extract_m3u8_formats(\n                        video_url.replace('.tar', '/base_index.m3u8'),\n                        video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False)\n                    for f in m3u8_formats:\n                        if f.get('vcodec') == 'none' and not f.get('tbr'):\n                            f['tbr'] = int_or_none(self._search_regex(\n                                r'-(\\d+)k/', f['url'], 'tbr', default=None))\n                    formats.extend(m3u8_formats)\n                elif source.tag == 'dash':\n                    formats.extend(self._extract_mpd_formats(\n                        video_url.replace('.tar', '/manifest.mpd'),\n                        video_id, mpd_id='dash', fatal=False))\n                else:\n                    format_info = self._FORMATS_INFO.get(source.tag, {})\n                    formats.append({\n                        'format_id': 'http-%s' % source.tag,\n                        'url': video_url,\n                        'width': format_info.get('width'),\n                        'height': format_info.get('height'),\n                    })\n        self._sort_formats(formats)\n\n        thumbnails = []\n        card_sizes = xpath_element(video_data, 'titleCardSizes')\n        if card_sizes is not None:\n            for size in card_sizes:\n                path = xpath_text(size, 'path')\n                if not path:\n                    continue\n                width = int_or_none(size.get('width'))\n                thumbnails.append({\n                    'id': width,\n                    'url': path,\n                    'width': width,\n                })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'duration': parse_duration(xpath_text(video_data, 'duration/tv14')),\n            'formats': formats,\n            'thumbnails': thumbnails,\n        }\n\n\nclass HBOIE(HBOBaseIE):\n    IE_NAME = 'hbo'\n    _VALID_URL = r'https?://(?:www\\.)?hbo\\.com/video/video\\.html\\?.*vid=(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.hbo.com/video/video.html?autoplay=true&g=u&vid=1437839',\n        'md5': '2c6a6bc1222c7e91cb3334dad1746e5a',\n        'info_dict': {\n            'id': '1437839',\n            'ext': 'mp4',\n            'title': 'Ep. 64 Clip: Encryption',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'duration': 1072,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self._extract_from_id(video_id)\n\n\nclass HBOEpisodeIE(HBOBaseIE):\n    IE_NAME = 'hbo:episode'\n    _VALID_URL = r'https?://(?:www\\.)?hbo\\.com/(?P<path>(?!video)(?:(?:[^/]+/)+video|watch-free-episodes)/(?P<id>[0-9a-z-]+))(?:\\.html)?'\n\n    _TESTS = [{\n        'url': 'http://www.hbo.com/girls/episodes/5/52-i-love-you-baby/video/ep-52-inside-the-episode.html?autoplay=true',\n        'md5': '61ead79b9c0dfa8d3d4b07ef4ac556fb',\n        'info_dict': {\n            'id': '1439518',\n            'display_id': 'ep-52-inside-the-episode',\n            'ext': 'mp4',\n            'title': 'Ep. 52: Inside the Episode',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'duration': 240,\n        },\n    }, {\n        'url': 'http://www.hbo.com/game-of-thrones/about/video/season-5-invitation-to-the-set.html?autoplay=true',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.hbo.com/watch-free-episodes/last-week-tonight-with-john-oliver',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        path, display_id = re.match(self._VALID_URL, url).groups()\n\n        content = self._download_json(\n            'http://www.hbo.com/api/content/' + path, display_id)['content']\n\n        video_id = compat_str((content.get('parsed', {}).get(\n            'common:FullBleedVideo', {}) or content['selectedEpisode'])['videoId'])\n\n        info_dict = self._extract_from_id(video_id)\n        info_dict['display_id'] = display_id\n\n        return info_dict\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "hbo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/hbo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}