{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport pytest\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_device_connectivity import ApiParameters\n    from library.bigip_device_connectivity import ModuleParameters\n    from library.bigip_device_connectivity import ModuleManager\n    from library.bigip_device_connectivity import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_device_connectivity import ApiParameters\n        from ansible.modules.network.f5.bigip_device_connectivity import ModuleParameters\n        from ansible.modules.network.f5.bigip_device_connectivity import ModuleManager\n        from ansible.modules.network.f5.bigip_device_connectivity import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            multicast_port='1010',\n            multicast_address='10.10.10.10',\n            multicast_interface='eth0',\n            failover_multicast=True,\n            unicast_failover=[\n                dict(\n                    address='20.20.20.20',\n                    port='1234'\n                )\n            ],\n            mirror_primary_address='1.2.3.4',\n            mirror_secondary_address='5.6.7.8',\n            config_sync_ip='4.3.2.1',\n            state='present',\n            server='localhost',\n            user='admin',\n            password='password'\n        )\n        p = ModuleParameters(params=args)\n        assert p.multicast_port == 1010\n        assert p.multicast_address == '10.10.10.10'\n        assert p.multicast_interface == 'eth0'\n        assert p.failover_multicast is True\n        assert p.mirror_primary_address == '1.2.3.4'\n        assert p.mirror_secondary_address == '5.6.7.8'\n        assert p.config_sync_ip == '4.3.2.1'\n        assert len(p.unicast_failover) == 1\n        assert 'effectiveIp' in p.unicast_failover[0]\n        assert 'effectivePort' in p.unicast_failover[0]\n        assert 'port' in p.unicast_failover[0]\n        assert 'ip' in p.unicast_failover[0]\n        assert p.unicast_failover[0]['effectiveIp'] == '20.20.20.20'\n        assert p.unicast_failover[0]['ip'] == '20.20.20.20'\n        assert p.unicast_failover[0]['port'] == 1234\n        assert p.unicast_failover[0]['effectivePort'] == 1234\n\n    def test_api_parameters(self):\n        params = load_fixture('load_tm_cm_device.json')\n        p = ApiParameters(params=params)\n        assert p.multicast_port == 62960\n        assert p.multicast_address == '224.0.0.245'\n        assert p.multicast_interface == 'eth0'\n        assert p.mirror_primary_address == '10.2.2.2'\n        assert p.mirror_secondary_address == '10.2.3.2'\n        assert p.config_sync_ip == '10.2.2.2'\n        assert len(p.unicast_failover) == 2\n        assert 'effectiveIp' in p.unicast_failover[0]\n        assert 'effectivePort' in p.unicast_failover[0]\n        assert 'port' in p.unicast_failover[0]\n        assert 'ip' in p.unicast_failover[0]\n        assert p.unicast_failover[0]['effectiveIp'] == 'management-ip'\n        assert p.unicast_failover[0]['ip'] == 'management-ip'\n        assert p.unicast_failover[0]['port'] == 1026\n        assert p.unicast_failover[0]['effectivePort'] == 1026\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_update_settings(self, *args):\n        set_module_args(dict(\n            config_sync_ip=\"10.1.30.1\",\n            mirror_primary_address=\"10.1.30.1\",\n            unicast_failover=[\n                dict(\n                    address=\"10.1.30.1\"\n                )\n            ],\n            server='localhost',\n            user='admin',\n            password='password'\n        ))\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = ApiParameters(params=load_fixture('load_tm_cm_device_default.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['config_sync_ip'] == '10.1.30.1'\n        assert results['mirror_primary_address'] == '10.1.30.1'\n        assert len(results.keys()) == 4\n\n    def test_set_primary_mirror_address_none(self, *args):\n        set_module_args(dict(\n            mirror_primary_address=\"none\",\n            server='localhost',\n            user='admin',\n            password='password'\n        ))\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = ApiParameters(params=load_fixture('load_tm_cm_device.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['mirror_primary_address'] == 'none'\n        assert len(results.keys()) == 2\n\n    def test_set_secondary_mirror_address_none(self, *args):\n        set_module_args(dict(\n            mirror_secondary_address=\"none\",\n            server='localhost',\n            user='admin',\n            password='password'\n        ))\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = ApiParameters(params=load_fixture('load_tm_cm_device.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['mirror_secondary_address'] == 'none'\n        assert len(results.keys()) == 2\n\n    def test_set_multicast_address_none(self, *args):\n        set_module_args(dict(\n            multicast_address=\"none\",\n            server='localhost',\n            user='admin',\n            password='password'\n        ))\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = ApiParameters(params=load_fixture('load_tm_cm_device.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['multicast_address'] == 'none'\n        assert len(results.keys()) == 2\n\n    def test_set_multicast_port_negative(self, *args):\n        set_module_args(dict(\n            multicast_port=-1,\n            server='localhost',\n            user='admin',\n            password='password'\n        ))\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = ApiParameters(params=load_fixture('load_tm_cm_device.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n\n        assert 'must be between' in str(ex)\n\n    def test_set_multicast_address(self, *args):\n        set_module_args(dict(\n            multicast_address=\"10.1.1.1\",\n            server='localhost',\n            user='admin',\n            password='password'\n        ))\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = ApiParameters(params=load_fixture('load_tm_cm_device.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['multicast_address'] == '10.1.1.1'\n        assert len(results.keys()) == 2\n\n    def test_unset_unicast_failover(self, *args):\n        set_module_args(dict(\n            unicast_failover=\"none\",\n            server='localhost',\n            user='admin',\n            password='password'\n        ))\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = ApiParameters(params=load_fixture('load_tm_cm_device.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['unicast_failover'] == 'none'\n        assert len(results.keys()) == 2\n\n    def test_unset_config_sync_ip(self, *args):\n        set_module_args(dict(\n            config_sync_ip=\"none\",\n            server='localhost',\n            user='admin',\n            password='password'\n        ))\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = ApiParameters(params=load_fixture('load_tm_cm_device.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['config_sync_ip'] == 'none'\n        assert len(results.keys()) == 2\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport pytest\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_device_connectivity import ApiParameters\n    from library.bigip_device_connectivity import ModuleParameters\n    from library.bigip_device_connectivity import ModuleManager\n    from library.bigip_device_connectivity import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_device_connectivity import ApiParameters\n        from ansible.modules.network.f5.bigip_device_connectivity import ModuleParameters\n        from ansible.modules.network.f5.bigip_device_connectivity import ModuleManager\n        from ansible.modules.network.f5.bigip_device_connectivity import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            multicast_port='1010',\n            multicast_address='10.10.10.10',\n            multicast_interface='eth0',\n            failover_multicast=True,\n            unicast_failover=[\n                dict(\n                    address='20.20.20.20',\n                    port='1234'\n                )\n            ],\n            mirror_primary_address='1.2.3.4',\n            mirror_secondary_address='5.6.7.8',\n            config_sync_ip='4.3.2.1',\n            state='present',\n            server='localhost',\n            user='admin',\n            password='password'\n        )\n        p = ModuleParameters(params=args)\n        assert p.multicast_port == 1010\n        assert p.multicast_address == '10.10.10.10'\n        assert p.multicast_interface == 'eth0'\n        assert p.failover_multicast is True\n        assert p.mirror_primary_address == '1.2.3.4'\n        assert p.mirror_secondary_address == '5.6.7.8'\n        assert p.config_sync_ip == '4.3.2.1'\n        assert len(p.unicast_failover) == 1\n        assert 'effectiveIp' in p.unicast_failover[0]\n        assert 'effectivePort' in p.unicast_failover[0]\n        assert 'port' in p.unicast_failover[0]\n        assert 'ip' in p.unicast_failover[0]\n        assert p.unicast_failover[0]['effectiveIp'] == '20.20.20.20'\n        assert p.unicast_failover[0]['ip'] == '20.20.20.20'\n        assert p.unicast_failover[0]['port'] == 1234\n        assert p.unicast_failover[0]['effectivePort'] == 1234\n\n    def test_api_parameters(self):\n        params = load_fixture('load_tm_cm_device.json')\n        p = ApiParameters(params=params)\n        assert p.multicast_port == 62960\n        assert p.multicast_address == '224.0.0.245'\n        assert p.multicast_interface == 'eth0'\n        assert p.mirror_primary_address == '10.2.2.2'\n        assert p.mirror_secondary_address == '10.2.3.2'\n        assert p.config_sync_ip == '10.2.2.2'\n        assert len(p.unicast_failover) == 2\n        assert 'effectiveIp' in p.unicast_failover[0]\n        assert 'effectivePort' in p.unicast_failover[0]\n        assert 'port' in p.unicast_failover[0]\n        assert 'ip' in p.unicast_failover[0]\n        assert p.unicast_failover[0]['effectiveIp'] == 'management-ip'\n        assert p.unicast_failover[0]['ip'] == 'management-ip'\n        assert p.unicast_failover[0]['port'] == 1026\n        assert p.unicast_failover[0]['effectivePort'] == 1026\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_update_settings(self, *args):\n        set_module_args(dict(\n            config_sync_ip=\"10.1.30.1\",\n            mirror_primary_address=\"10.1.30.1\",\n            unicast_failover=[\n                dict(\n                    address=\"10.1.30.1\"\n                )\n            ],\n            server='localhost',\n            user='admin',\n            password='password'\n        ))\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = ApiParameters(params=load_fixture('load_tm_cm_device_default.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['config_sync_ip'] == '10.1.30.1'\n        assert results['mirror_primary_address'] == '10.1.30.1'\n        assert len(results.keys()) == 4\n\n    def test_set_primary_mirror_address_none(self, *args):\n        set_module_args(dict(\n            mirror_primary_address=\"none\",\n            server='localhost',\n            user='admin',\n            password='password'\n        ))\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = ApiParameters(params=load_fixture('load_tm_cm_device.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['mirror_primary_address'] == 'none'\n        assert len(results.keys()) == 2\n\n    def test_set_secondary_mirror_address_none(self, *args):\n        set_module_args(dict(\n            mirror_secondary_address=\"none\",\n            server='localhost',\n            user='admin',\n            password='password'\n        ))\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = ApiParameters(params=load_fixture('load_tm_cm_device.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['mirror_secondary_address'] == 'none'\n        assert len(results.keys()) == 2\n\n    def test_set_multicast_address_none(self, *args):\n        set_module_args(dict(\n            multicast_address=\"none\",\n            server='localhost',\n            user='admin',\n            password='password'\n        ))\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = ApiParameters(params=load_fixture('load_tm_cm_device.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['multicast_address'] == 'none'\n        assert len(results.keys()) == 2\n\n    def test_set_multicast_port_negative(self, *args):\n        set_module_args(dict(\n            multicast_port=-1,\n            server='localhost',\n            user='admin',\n            password='password'\n        ))\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = ApiParameters(params=load_fixture('load_tm_cm_device.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n\n        assert 'must be between' in str(ex)\n\n    def test_set_multicast_address(self, *args):\n        set_module_args(dict(\n            multicast_address=\"10.1.1.1\",\n            server='localhost',\n            user='admin',\n            password='password'\n        ))\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = ApiParameters(params=load_fixture('load_tm_cm_device.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['multicast_address'] == '10.1.1.1'\n        assert len(results.keys()) == 2\n\n    def test_unset_unicast_failover(self, *args):\n        set_module_args(dict(\n            unicast_failover=\"none\",\n            server='localhost',\n            user='admin',\n            password='password'\n        ))\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = ApiParameters(params=load_fixture('load_tm_cm_device.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['unicast_failover'] == 'none'\n        assert len(results.keys()) == 2\n\n    def test_unset_config_sync_ip(self, *args):\n        set_module_args(dict(\n            config_sync_ip=\"none\",\n            server='localhost',\n            user='admin',\n            password='password'\n        ))\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = ApiParameters(params=load_fixture('load_tm_cm_device.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['config_sync_ip'] == 'none'\n        assert len(results.keys()) == 2\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_device_connectivity.py", "id": "d7122cfce5246e762d811dd948c61ac9", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_device_connectivity.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}