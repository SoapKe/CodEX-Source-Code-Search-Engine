{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom .adobepass import AdobePassIE\nfrom .theplatform import ThePlatformIE\nfrom ..utils import (\n    smuggle_url,\n    url_basename,\n    update_url_query,\n    get_element_by_class,\n)\n\n\nclass NationalGeographicVideoIE(InfoExtractor):\n    IE_NAME = 'natgeo:video'\n    _VALID_URL = r'https?://video\\.nationalgeographic\\.com/.*?'\n\n    _TESTS = [\n        {\n            'url': 'http://video.nationalgeographic.com/video/news/150210-news-crab-mating-vin?source=featuredvideo',\n            'md5': '730855d559abbad6b42c2be1fa584917',\n            'info_dict': {\n                'id': '0000014b-70a1-dd8c-af7f-f7b559330001',\n                'ext': 'mp4',\n                'title': 'Mating Crabs Busted by Sharks',\n                'description': 'md5:16f25aeffdeba55aaa8ec37e093ad8b3',\n                'timestamp': 1423523799,\n                'upload_date': '20150209',\n                'uploader': 'NAGS',\n            },\n            'add_ie': ['ThePlatform'],\n        },\n        {\n            'url': 'http://video.nationalgeographic.com/wild/when-sharks-attack/the-real-jaws',\n            'md5': '6a3105eb448c070503b3105fb9b320b5',\n            'info_dict': {\n                'id': 'ngc-I0IauNSWznb_UV008GxSbwY35BZvgi2e',\n                'ext': 'mp4',\n                'title': 'The Real Jaws',\n                'description': 'md5:8d3e09d9d53a85cd397b4b21b2c77be6',\n                'timestamp': 1433772632,\n                'upload_date': '20150608',\n                'uploader': 'NAGS',\n            },\n            'add_ie': ['ThePlatform'],\n        },\n    ]\n\n    def _real_extract(self, url):\n        name = url_basename(url)\n\n        webpage = self._download_webpage(url, name)\n        guid = self._search_regex(\n            r'id=\"(?:videoPlayer|player-container)\"[^>]+data-guid=\"([^\"]+)\"',\n            webpage, 'guid')\n\n        return {\n            '_type': 'url_transparent',\n            'ie_key': 'ThePlatform',\n            'url': smuggle_url(\n                'http://link.theplatform.com/s/ngs/media/guid/2423130747/%s?mbr=true' % guid,\n                {'force_smil_url': True}),\n            'id': guid,\n        }\n\n\nclass NationalGeographicIE(ThePlatformIE, AdobePassIE):\n    IE_NAME = 'natgeo'\n    _VALID_URL = r'https?://channel\\.nationalgeographic\\.com/(?:(?:wild/)?[^/]+/)?(?:videos|episodes)/(?P<id>[^/?]+)'\n\n    _TESTS = [\n        {\n            'url': 'http://channel.nationalgeographic.com/the-story-of-god-with-morgan-freeman/videos/uncovering-a-universal-knowledge/',\n            'md5': '518c9aa655686cf81493af5cc21e2a04',\n            'info_dict': {\n                'id': 'vKInpacll2pC',\n                'ext': 'mp4',\n                'title': 'Uncovering a Universal Knowledge',\n                'description': 'md5:1a89148475bf931b3661fcd6ddb2ae3a',\n                'timestamp': 1458680907,\n                'upload_date': '20160322',\n                'uploader': 'NEWA-FNG-NGTV',\n            },\n            'add_ie': ['ThePlatform'],\n        },\n        {\n            'url': 'http://channel.nationalgeographic.com/wild/destination-wild/videos/the-stunning-red-bird-of-paradise/',\n            'md5': 'c4912f656b4cbe58f3e000c489360989',\n            'info_dict': {\n                'id': 'Pok5lWCkiEFA',\n                'ext': 'mp4',\n                'title': 'The Stunning Red Bird of Paradise',\n                'description': 'md5:7bc8cd1da29686be4d17ad1230f0140c',\n                'timestamp': 1459362152,\n                'upload_date': '20160330',\n                'uploader': 'NEWA-FNG-NGTV',\n            },\n            'add_ie': ['ThePlatform'],\n        },\n        {\n            'url': 'http://channel.nationalgeographic.com/the-story-of-god-with-morgan-freeman/episodes/the-power-of-miracles/',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://channel.nationalgeographic.com/videos/treasures-rediscovered/',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        release_url = self._search_regex(\n            r'video_auth_playlist_url\\s*=\\s*\"([^\"]+)\"',\n            webpage, 'release url')\n        theplatform_path = self._search_regex(r'https?://link\\.theplatform\\.com/s/([^?]+)', release_url, 'theplatform path')\n        video_id = theplatform_path.split('/')[-1]\n        query = {\n            'mbr': 'true',\n        }\n        is_auth = self._search_regex(r'video_is_auth\\s*=\\s*\"([^\"]+)\"', webpage, 'is auth', fatal=False)\n        if is_auth == 'auth':\n            auth_resource_id = self._search_regex(\n                r\"video_auth_resourceId\\s*=\\s*'([^']+)'\",\n                webpage, 'auth resource id')\n            query['auth'] = self._extract_mvpd_auth(url, video_id, 'natgeo', auth_resource_id)\n\n        formats = []\n        subtitles = {}\n        for key, value in (('switch', 'http'), ('manifest', 'm3u')):\n            tp_query = query.copy()\n            tp_query.update({\n                key: value,\n            })\n            tp_formats, tp_subtitles = self._extract_theplatform_smil(\n                update_url_query(release_url, tp_query), video_id, 'Downloading %s SMIL data' % value)\n            formats.extend(tp_formats)\n            subtitles = self._merge_subtitles(subtitles, tp_subtitles)\n        self._sort_formats(formats)\n\n        info = self._extract_theplatform_metadata(theplatform_path, display_id)\n        info.update({\n            'id': video_id,\n            'formats': formats,\n            'subtitles': subtitles,\n            'display_id': display_id,\n        })\n        return info\n\n\nclass NationalGeographicEpisodeGuideIE(InfoExtractor):\n    IE_NAME = 'natgeo:episodeguide'\n    _VALID_URL = r'https?://channel\\.nationalgeographic\\.com/(?:wild/)?(?P<id>[^/]+)/episode-guide'\n    _TESTS = [\n        {\n            'url': 'http://channel.nationalgeographic.com/the-story-of-god-with-morgan-freeman/episode-guide/',\n            'info_dict': {\n                'id': 'the-story-of-god-with-morgan-freeman-season-1',\n                'title': 'The Story of God with Morgan Freeman - Season 1',\n            },\n            'playlist_mincount': 6,\n        },\n        {\n            'url': 'http://channel.nationalgeographic.com/underworld-inc/episode-guide/?s=2',\n            'info_dict': {\n                'id': 'underworld-inc-season-2',\n                'title': 'Underworld, Inc. - Season 2',\n            },\n            'playlist_mincount': 7,\n        },\n    ]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        show = get_element_by_class('show', webpage)\n        selected_season = self._search_regex(\n            r'<div[^>]+class=\"select-seasons[^\"]*\".*?<a[^>]*>(.*?)</a>',\n            webpage, 'selected season')\n        entries = [\n            self.url_result(self._proto_relative_url(entry_url), 'NationalGeographic')\n            for entry_url in re.findall('(?s)<div[^>]+class=\"col-inner\"[^>]*?>.*?<a[^>]+href=\"([^\"]+)\"', webpage)]\n        return self.playlist_result(\n            entries, '%s-%s' % (display_id, selected_season.lower().replace(' ', '-')),\n            '%s - %s' % (show, selected_season))\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom .adobepass import AdobePassIE\nfrom .theplatform import ThePlatformIE\nfrom ..utils import (\n    smuggle_url,\n    url_basename,\n    update_url_query,\n    get_element_by_class,\n)\n\n\nclass NationalGeographicVideoIE(InfoExtractor):\n    IE_NAME = 'natgeo:video'\n    _VALID_URL = r'https?://video\\.nationalgeographic\\.com/.*?'\n\n    _TESTS = [\n        {\n            'url': 'http://video.nationalgeographic.com/video/news/150210-news-crab-mating-vin?source=featuredvideo',\n            'md5': '730855d559abbad6b42c2be1fa584917',\n            'info_dict': {\n                'id': '0000014b-70a1-dd8c-af7f-f7b559330001',\n                'ext': 'mp4',\n                'title': 'Mating Crabs Busted by Sharks',\n                'description': 'md5:16f25aeffdeba55aaa8ec37e093ad8b3',\n                'timestamp': 1423523799,\n                'upload_date': '20150209',\n                'uploader': 'NAGS',\n            },\n            'add_ie': ['ThePlatform'],\n        },\n        {\n            'url': 'http://video.nationalgeographic.com/wild/when-sharks-attack/the-real-jaws',\n            'md5': '6a3105eb448c070503b3105fb9b320b5',\n            'info_dict': {\n                'id': 'ngc-I0IauNSWznb_UV008GxSbwY35BZvgi2e',\n                'ext': 'mp4',\n                'title': 'The Real Jaws',\n                'description': 'md5:8d3e09d9d53a85cd397b4b21b2c77be6',\n                'timestamp': 1433772632,\n                'upload_date': '20150608',\n                'uploader': 'NAGS',\n            },\n            'add_ie': ['ThePlatform'],\n        },\n    ]\n\n    def _real_extract(self, url):\n        name = url_basename(url)\n\n        webpage = self._download_webpage(url, name)\n        guid = self._search_regex(\n            r'id=\"(?:videoPlayer|player-container)\"[^>]+data-guid=\"([^\"]+)\"',\n            webpage, 'guid')\n\n        return {\n            '_type': 'url_transparent',\n            'ie_key': 'ThePlatform',\n            'url': smuggle_url(\n                'http://link.theplatform.com/s/ngs/media/guid/2423130747/%s?mbr=true' % guid,\n                {'force_smil_url': True}),\n            'id': guid,\n        }\n\n\nclass NationalGeographicIE(ThePlatformIE, AdobePassIE):\n    IE_NAME = 'natgeo'\n    _VALID_URL = r'https?://channel\\.nationalgeographic\\.com/(?:(?:wild/)?[^/]+/)?(?:videos|episodes)/(?P<id>[^/?]+)'\n\n    _TESTS = [\n        {\n            'url': 'http://channel.nationalgeographic.com/the-story-of-god-with-morgan-freeman/videos/uncovering-a-universal-knowledge/',\n            'md5': '518c9aa655686cf81493af5cc21e2a04',\n            'info_dict': {\n                'id': 'vKInpacll2pC',\n                'ext': 'mp4',\n                'title': 'Uncovering a Universal Knowledge',\n                'description': 'md5:1a89148475bf931b3661fcd6ddb2ae3a',\n                'timestamp': 1458680907,\n                'upload_date': '20160322',\n                'uploader': 'NEWA-FNG-NGTV',\n            },\n            'add_ie': ['ThePlatform'],\n        },\n        {\n            'url': 'http://channel.nationalgeographic.com/wild/destination-wild/videos/the-stunning-red-bird-of-paradise/',\n            'md5': 'c4912f656b4cbe58f3e000c489360989',\n            'info_dict': {\n                'id': 'Pok5lWCkiEFA',\n                'ext': 'mp4',\n                'title': 'The Stunning Red Bird of Paradise',\n                'description': 'md5:7bc8cd1da29686be4d17ad1230f0140c',\n                'timestamp': 1459362152,\n                'upload_date': '20160330',\n                'uploader': 'NEWA-FNG-NGTV',\n            },\n            'add_ie': ['ThePlatform'],\n        },\n        {\n            'url': 'http://channel.nationalgeographic.com/the-story-of-god-with-morgan-freeman/episodes/the-power-of-miracles/',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://channel.nationalgeographic.com/videos/treasures-rediscovered/',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        release_url = self._search_regex(\n            r'video_auth_playlist_url\\s*=\\s*\"([^\"]+)\"',\n            webpage, 'release url')\n        theplatform_path = self._search_regex(r'https?://link\\.theplatform\\.com/s/([^?]+)', release_url, 'theplatform path')\n        video_id = theplatform_path.split('/')[-1]\n        query = {\n            'mbr': 'true',\n        }\n        is_auth = self._search_regex(r'video_is_auth\\s*=\\s*\"([^\"]+)\"', webpage, 'is auth', fatal=False)\n        if is_auth == 'auth':\n            auth_resource_id = self._search_regex(\n                r\"video_auth_resourceId\\s*=\\s*'([^']+)'\",\n                webpage, 'auth resource id')\n            query['auth'] = self._extract_mvpd_auth(url, video_id, 'natgeo', auth_resource_id)\n\n        formats = []\n        subtitles = {}\n        for key, value in (('switch', 'http'), ('manifest', 'm3u')):\n            tp_query = query.copy()\n            tp_query.update({\n                key: value,\n            })\n            tp_formats, tp_subtitles = self._extract_theplatform_smil(\n                update_url_query(release_url, tp_query), video_id, 'Downloading %s SMIL data' % value)\n            formats.extend(tp_formats)\n            subtitles = self._merge_subtitles(subtitles, tp_subtitles)\n        self._sort_formats(formats)\n\n        info = self._extract_theplatform_metadata(theplatform_path, display_id)\n        info.update({\n            'id': video_id,\n            'formats': formats,\n            'subtitles': subtitles,\n            'display_id': display_id,\n        })\n        return info\n\n\nclass NationalGeographicEpisodeGuideIE(InfoExtractor):\n    IE_NAME = 'natgeo:episodeguide'\n    _VALID_URL = r'https?://channel\\.nationalgeographic\\.com/(?:wild/)?(?P<id>[^/]+)/episode-guide'\n    _TESTS = [\n        {\n            'url': 'http://channel.nationalgeographic.com/the-story-of-god-with-morgan-freeman/episode-guide/',\n            'info_dict': {\n                'id': 'the-story-of-god-with-morgan-freeman-season-1',\n                'title': 'The Story of God with Morgan Freeman - Season 1',\n            },\n            'playlist_mincount': 6,\n        },\n        {\n            'url': 'http://channel.nationalgeographic.com/underworld-inc/episode-guide/?s=2',\n            'info_dict': {\n                'id': 'underworld-inc-season-2',\n                'title': 'Underworld, Inc. - Season 2',\n            },\n            'playlist_mincount': 7,\n        },\n    ]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        show = get_element_by_class('show', webpage)\n        selected_season = self._search_regex(\n            r'<div[^>]+class=\"select-seasons[^\"]*\".*?<a[^>]*>(.*?)</a>',\n            webpage, 'selected season')\n        entries = [\n            self.url_result(self._proto_relative_url(entry_url), 'NationalGeographic')\n            for entry_url in re.findall('(?s)<div[^>]+class=\"col-inner\"[^>]*?>.*?<a[^>]+href=\"([^\"]+)\"', webpage)]\n        return self.playlist_result(\n            entries, '%s-%s' % (display_id, selected_season.lower().replace(' ', '-')),\n            '%s - %s' % (show, selected_season))\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "nationalgeographic.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/nationalgeographic.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}