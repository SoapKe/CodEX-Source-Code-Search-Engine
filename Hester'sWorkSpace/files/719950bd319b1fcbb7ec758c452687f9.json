{"author": "Zulko", "code": "import os\nimport sys\n\nimport moviepy.video.tools.cuts as cuts\nimport pytest\nfrom moviepy.video.compositing.CompositeVideoClip import CompositeVideoClip\nfrom moviepy.video.compositing.concatenate import concatenate_videoclips\nfrom moviepy.video.tools.subtitles import SubtitlesClip, file_to_subtitles\nfrom moviepy.video.VideoClip import ColorClip, TextClip\nfrom moviepy.video.io.VideoFileClip import VideoFileClip\n\nimport download_media\nfrom test_helper import TMP_DIR, TRAVIS, FONT\n\nsys.path.append(\"tests\")\n\n\ndef test_download_media(capsys):\n    with capsys.disabled():\n       download_media.download()\n\ndef test_cuts1():\n    with VideoFileClip(\"media/big_buck_bunny_432_433.webm\").resize(0.2) as clip:\n        cuts.find_video_period(clip) == pytest.approx(0.966666666667, 0.0001)\n\ndef test_subtitles():\n    red = ColorClip((800, 600), color=(255,0,0)).set_duration(10)\n    green = ColorClip((800, 600), color=(0,255,0)).set_duration(10)\n    blue = ColorClip((800, 600), color=(0,0,255)).set_duration(10)\n    myvideo = concatenate_videoclips([red,green,blue])\n    assert myvideo.duration == 30\n\n    \n    \n    if TRAVIS:\n       return\n\n    generator = lambda txt: TextClip(txt, font=FONT,\n                                     size=(800,600), fontsize=24,\n                                     method='caption', align='South',\n                                     color='white')\n\n    subtitles = SubtitlesClip(\"media/subtitles1.srt\", generator)\n    with CompositeVideoClip([myvideo, subtitles]) as final:\n        final.to_videofile(os.path.join(TMP_DIR, \"subtitles1.mp4\"), fps=30)\n\n    data = [([0.0, 4.0], 'Red!'), ([5.0, 9.0], 'More Red!'),\n            ([10.0, 14.0], 'Green!'), ([15.0, 19.0], 'More Green!'),\n            ([20.0, 24.0], 'Blue'), ([25.0, 29.0], 'More Blue!')]\n\n    assert subtitles.subtitles == data\n\n    subtitles = SubtitlesClip(data, generator)\n    assert subtitles.subtitles == data\n\ndef test_file_to_subtitles():\n    data = [([0.0, 4.0], 'Red!'), ([5.0, 9.0], 'More Red!'),\n            ([10.0, 14.0], 'Green!'), ([15.0, 19.0], 'More Green!'),\n            ([20.0, 24.0], 'Blue'), ([25.0, 29.0], 'More Blue!')]\n\n    assert data == file_to_subtitles(\"media/subtitles1.srt\")\n\nif __name__ == '__main__':\n   pytest.main()\n", "comments": " travis like textclip   return     allow regular users still run test ", "content": "import os\nimport sys\n\nimport moviepy.video.tools.cuts as cuts\nimport pytest\nfrom moviepy.video.compositing.CompositeVideoClip import CompositeVideoClip\nfrom moviepy.video.compositing.concatenate import concatenate_videoclips\nfrom moviepy.video.tools.subtitles import SubtitlesClip, file_to_subtitles\nfrom moviepy.video.VideoClip import ColorClip, TextClip\nfrom moviepy.video.io.VideoFileClip import VideoFileClip\n\nimport download_media\nfrom test_helper import TMP_DIR, TRAVIS, FONT\n\nsys.path.append(\"tests\")\n\n\ndef test_download_media(capsys):\n    with capsys.disabled():\n       download_media.download()\n\ndef test_cuts1():\n    with VideoFileClip(\"media/big_buck_bunny_432_433.webm\").resize(0.2) as clip:\n        cuts.find_video_period(clip) == pytest.approx(0.966666666667, 0.0001)\n\ndef test_subtitles():\n    red = ColorClip((800, 600), color=(255,0,0)).set_duration(10)\n    green = ColorClip((800, 600), color=(0,255,0)).set_duration(10)\n    blue = ColorClip((800, 600), color=(0,0,255)).set_duration(10)\n    myvideo = concatenate_videoclips([red,green,blue])\n    assert myvideo.duration == 30\n\n    #travis does not like TextClip.. so return for now..\n    #but allow regular users to still run the test below\n    if TRAVIS:\n       return\n\n    generator = lambda txt: TextClip(txt, font=FONT,\n                                     size=(800,600), fontsize=24,\n                                     method='caption', align='South',\n                                     color='white')\n\n    subtitles = SubtitlesClip(\"media/subtitles1.srt\", generator)\n    with CompositeVideoClip([myvideo, subtitles]) as final:\n        final.to_videofile(os.path.join(TMP_DIR, \"subtitles1.mp4\"), fps=30)\n\n    data = [([0.0, 4.0], 'Red!'), ([5.0, 9.0], 'More Red!'),\n            ([10.0, 14.0], 'Green!'), ([15.0, 19.0], 'More Green!'),\n            ([20.0, 24.0], 'Blue'), ([25.0, 29.0], 'More Blue!')]\n\n    assert subtitles.subtitles == data\n\n    subtitles = SubtitlesClip(data, generator)\n    assert subtitles.subtitles == data\n\ndef test_file_to_subtitles():\n    data = [([0.0, 4.0], 'Red!'), ([5.0, 9.0], 'More Red!'),\n            ([10.0, 14.0], 'Green!'), ([15.0, 19.0], 'More Green!'),\n            ([20.0, 24.0], 'Blue'), ([25.0, 29.0], 'More Blue!')]\n\n    assert data == file_to_subtitles(\"media/subtitles1.srt\")\n\nif __name__ == '__main__':\n   pytest.main()\n", "description": "Video editing with Python", "file_name": "test_misc.py", "id": "719950bd319b1fcbb7ec758c452687f9", "language": "Python", "project_name": "moviepy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/Zulko-moviepy/Zulko-moviepy-6cbd4f3/tests/test_misc.py", "save_time": "", "source": "", "update_at": "2018-03-18T10:21:24Z", "url": "https://github.com/Zulko/moviepy", "wiki": true}