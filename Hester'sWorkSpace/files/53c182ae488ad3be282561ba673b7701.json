{"author": "django", "code": "\"\"\"\nXX. Model inheritance\n\nModel inheritance exists in two varieties:\n    - abstract base classes which are a way of specifying common\n      information inherited by the subclasses. They don't exist as a separate\n      model.\n    - non-abstract base classes (the default), which are models in their own\n      right with their own database tables and everything. Their subclasses\n      have references back to them, created automatically.\n\nBoth styles are demonstrated here.\n\"\"\"\nfrom django.db import models\n\n\n Abstract base classes\n\n\n\nclass CommonInfo(models.Model):\n    name = models.CharField(max_length=50)\n    age = models.PositiveIntegerField()\n\n    class Meta:\n        abstract = True\n        ordering = ['name']\n\n    def __str__(self):\n        return '%s %s' % (self.__class__.__name__, self.name)\n\n\nclass Worker(CommonInfo):\n    job = models.CharField(max_length=50)\n\n\nclass Student(CommonInfo):\n    school_class = models.CharField(max_length=10)\n\n    class Meta:\n        pass\n\n\n\n Abstract base classes with related models\n\n\nclass Post(models.Model):\n    title = models.CharField(max_length=50)\n\n\nclass Attachment(models.Model):\n    post = models.ForeignKey(\n        Post,\n        models.CASCADE,\n        related_name='attached_%(class)s_set',\n        related_query_name='attached_%(app_label)s_%(class)ss',\n    )\n    content = models.TextField()\n\n    class Meta:\n        abstract = True\n\n    def __str__(self):\n        return self.content\n\n\nclass Comment(Attachment):\n    is_spam = models.BooleanField(default=False)\n\n\nclass Link(Attachment):\n    url = models.URLField()\n\n\n\n Multi-table inheritance\n\n\nclass Chef(models.Model):\n    name = models.CharField(max_length=50)\n\n    def __str__(self):\n        return \"%s the chef\" % self.name\n\n\nclass Place(models.Model):\n    name = models.CharField(max_length=50)\n    address = models.CharField(max_length=80)\n\n    def __str__(self):\n        return \"%s the place\" % self.name\n\n\nclass Rating(models.Model):\n    rating = models.IntegerField(null=True, blank=True)\n\n    class Meta:\n        abstract = True\n        ordering = ['-rating']\n\n\nclass Restaurant(Place, Rating):\n    serves_hot_dogs = models.BooleanField(default=False)\n    serves_pizza = models.BooleanField(default=False)\n    chef = models.ForeignKey(Chef, models.SET_NULL, null=True, blank=True)\n\n    class Meta(Rating.Meta):\n        db_table = 'my_restaurant'\n\n    def __str__(self):\n        return \"%s the restaurant\" % self.name\n\n\nclass ItalianRestaurant(Restaurant):\n    serves_gnocchi = models.BooleanField(default=False)\n\n    def __str__(self):\n        return \"%s the italian restaurant\" % self.name\n\n\nclass Supplier(Place):\n    customers = models.ManyToManyField(Restaurant, related_name='provider')\n\n    def __str__(self):\n        return \"%s the supplier\" % self.name\n\n\nclass ParkingLot(Place):\n     An explicit link to the parent (we can control the attribute name).\n    parent = models.OneToOneField(Place, models.CASCADE, primary_key=True, parent_link=True)\n    main_site = models.ForeignKey(Place, models.CASCADE, related_name='lot')\n\n    def __str__(self):\n        return \"%s the parking lot\" % self.name\n\n\n\n Abstract base classes with related models where the sub-class has the\n same name in a different app and inherits from the same abstract base\n class.\n NOTE: The actual API tests for the following classes are in\n       model_inheritance_same_model_name/models.py - They are defined\n       here in order to have the name conflict between apps\n\n\nclass Title(models.Model):\n    title = models.CharField(max_length=50)\n\n\nclass NamedURL(models.Model):\n    title = models.ForeignKey(Title, models.CASCADE, related_name='attached_%(app_label)s_%(class)s_set')\n    url = models.URLField()\n\n    class Meta:\n        abstract = True\n\n\nclass Mixin:\n    def __init__(self):\n        self.other_attr = 1\n        super().__init__()\n\n\nclass MixinModel(models.Model, Mixin):\n    pass\n\n\nclass Base(models.Model):\n    titles = models.ManyToManyField(Title)\n\n\nclass SubBase(Base):\n    sub_id = models.IntegerField(primary_key=True)\n\n\nclass GrandParent(models.Model):\n    first_name = models.CharField(max_length=80)\n    last_name = models.CharField(max_length=80)\n    email = models.EmailField(unique=True)\n    place = models.ForeignKey(Place, models.CASCADE, null=True, related_name='+')\n\n    class Meta:\n        unique_together = ('first_name', 'last_name')\n\n\nclass Parent(GrandParent):\n    pass\n\n\nclass Child(Parent):\n    pass\n\n\nclass GrandChild(Child):\n    pass\n", "comments": "    xx  model inheritance  model inheritance exists two varieties        abstract base classes way specifying common       information inherited subclasses  they exist separate       model        non abstract base classes (the default)  models       right database tables everything  their subclasses       references back  created automatically   both styles demonstrated            abstract base classes          abstract base classes related models          multi table inheritance       an explicit link parent (we control attribute name)        abstract base classes related models sub class    name different app inherits abstract base    class     note  the actual api tests following classes          model inheritance model name models py   they defined          order name conflict apps    ", "content": "\"\"\"\nXX. Model inheritance\n\nModel inheritance exists in two varieties:\n    - abstract base classes which are a way of specifying common\n      information inherited by the subclasses. They don't exist as a separate\n      model.\n    - non-abstract base classes (the default), which are models in their own\n      right with their own database tables and everything. Their subclasses\n      have references back to them, created automatically.\n\nBoth styles are demonstrated here.\n\"\"\"\nfrom django.db import models\n\n#\n# Abstract base classes\n#\n\n\nclass CommonInfo(models.Model):\n    name = models.CharField(max_length=50)\n    age = models.PositiveIntegerField()\n\n    class Meta:\n        abstract = True\n        ordering = ['name']\n\n    def __str__(self):\n        return '%s %s' % (self.__class__.__name__, self.name)\n\n\nclass Worker(CommonInfo):\n    job = models.CharField(max_length=50)\n\n\nclass Student(CommonInfo):\n    school_class = models.CharField(max_length=10)\n\n    class Meta:\n        pass\n\n\n#\n# Abstract base classes with related models\n#\n\nclass Post(models.Model):\n    title = models.CharField(max_length=50)\n\n\nclass Attachment(models.Model):\n    post = models.ForeignKey(\n        Post,\n        models.CASCADE,\n        related_name='attached_%(class)s_set',\n        related_query_name='attached_%(app_label)s_%(class)ss',\n    )\n    content = models.TextField()\n\n    class Meta:\n        abstract = True\n\n    def __str__(self):\n        return self.content\n\n\nclass Comment(Attachment):\n    is_spam = models.BooleanField(default=False)\n\n\nclass Link(Attachment):\n    url = models.URLField()\n\n\n#\n# Multi-table inheritance\n#\n\nclass Chef(models.Model):\n    name = models.CharField(max_length=50)\n\n    def __str__(self):\n        return \"%s the chef\" % self.name\n\n\nclass Place(models.Model):\n    name = models.CharField(max_length=50)\n    address = models.CharField(max_length=80)\n\n    def __str__(self):\n        return \"%s the place\" % self.name\n\n\nclass Rating(models.Model):\n    rating = models.IntegerField(null=True, blank=True)\n\n    class Meta:\n        abstract = True\n        ordering = ['-rating']\n\n\nclass Restaurant(Place, Rating):\n    serves_hot_dogs = models.BooleanField(default=False)\n    serves_pizza = models.BooleanField(default=False)\n    chef = models.ForeignKey(Chef, models.SET_NULL, null=True, blank=True)\n\n    class Meta(Rating.Meta):\n        db_table = 'my_restaurant'\n\n    def __str__(self):\n        return \"%s the restaurant\" % self.name\n\n\nclass ItalianRestaurant(Restaurant):\n    serves_gnocchi = models.BooleanField(default=False)\n\n    def __str__(self):\n        return \"%s the italian restaurant\" % self.name\n\n\nclass Supplier(Place):\n    customers = models.ManyToManyField(Restaurant, related_name='provider')\n\n    def __str__(self):\n        return \"%s the supplier\" % self.name\n\n\nclass ParkingLot(Place):\n    # An explicit link to the parent (we can control the attribute name).\n    parent = models.OneToOneField(Place, models.CASCADE, primary_key=True, parent_link=True)\n    main_site = models.ForeignKey(Place, models.CASCADE, related_name='lot')\n\n    def __str__(self):\n        return \"%s the parking lot\" % self.name\n\n\n#\n# Abstract base classes with related models where the sub-class has the\n# same name in a different app and inherits from the same abstract base\n# class.\n# NOTE: The actual API tests for the following classes are in\n#       model_inheritance_same_model_name/models.py - They are defined\n#       here in order to have the name conflict between apps\n#\n\nclass Title(models.Model):\n    title = models.CharField(max_length=50)\n\n\nclass NamedURL(models.Model):\n    title = models.ForeignKey(Title, models.CASCADE, related_name='attached_%(app_label)s_%(class)s_set')\n    url = models.URLField()\n\n    class Meta:\n        abstract = True\n\n\nclass Mixin:\n    def __init__(self):\n        self.other_attr = 1\n        super().__init__()\n\n\nclass MixinModel(models.Model, Mixin):\n    pass\n\n\nclass Base(models.Model):\n    titles = models.ManyToManyField(Title)\n\n\nclass SubBase(Base):\n    sub_id = models.IntegerField(primary_key=True)\n\n\nclass GrandParent(models.Model):\n    first_name = models.CharField(max_length=80)\n    last_name = models.CharField(max_length=80)\n    email = models.EmailField(unique=True)\n    place = models.ForeignKey(Place, models.CASCADE, null=True, related_name='+')\n\n    class Meta:\n        unique_together = ('first_name', 'last_name')\n\n\nclass Parent(GrandParent):\n    pass\n\n\nclass Child(Parent):\n    pass\n\n\nclass GrandChild(Child):\n    pass\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "53c182ae488ad3be282561ba673b7701", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/model_inheritance/models.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}