{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n)\nfrom ..utils import (\n    int_or_none,\n    ExtractorError,\n)\n\n\nclass VubeIE(InfoExtractor):\n    IE_NAME = 'vube'\n    IE_DESC = 'Vube.com'\n    _VALID_URL = r'https?://vube\\.com/(?:[^/]+/)+(?P<id>[\\da-zA-Z]{10})\\b'\n\n    _TESTS = [\n        {\n            'url': 'http://vube.com/trending/William+Wei/Y8NUZ69Tf7?t=s',\n            'md5': 'e7aabe1f8f1aa826b9e4735e1f9cee42',\n            'info_dict': {\n                'id': 'Y8NUZ69Tf7',\n                'ext': 'mp4',\n                'title': 'Best Drummer Ever [HD]',\n                'description': 'md5:2d63c4b277b85c2277761c2cf7337d71',\n                'thumbnail': r're:^https?://.*\\.jpg',\n                'uploader': 'William',\n                'timestamp': 1406876915,\n                'upload_date': '20140801',\n                'duration': 258.051,\n                'like_count': int,\n                'dislike_count': int,\n                'comment_count': int,\n                'categories': ['amazing', 'hd', 'best drummer ever', 'william wei', 'bucket drumming', 'street drummer', 'epic street drumming'],\n            },\n            'skip': 'Not accessible from Travis CI server',\n        }, {\n            'url': 'http://vube.com/Chiara+Grispo+Video+Channel/YL2qNPkqon',\n            'md5': 'db7aba89d4603dadd627e9d1973946fe',\n            'info_dict': {\n                'id': 'YL2qNPkqon',\n                'ext': 'mp4',\n                'title': 'Chiara Grispo - Price Tag by Jessie J',\n                'description': 'md5:8ea652a1f36818352428cb5134933313',\n                'thumbnail': r're:^http://frame\\.thestaticvube\\.com/snap/[0-9x]+/102e7e63057-5ebc-4f5c-4065-6ce4ebde131f\\.jpg$',\n                'uploader': 'Chiara.Grispo',\n                'timestamp': 1388743358,\n                'upload_date': '20140103',\n                'duration': 170.56,\n                'like_count': int,\n                'dislike_count': int,\n                'comment_count': int,\n                'categories': ['pop', 'music', 'cover', 'singing', 'jessie j', 'price tag', 'chiara grispo'],\n            },\n            'skip': 'Removed due to DMCA',\n        },\n        {\n            'url': 'http://vube.com/SerainaMusic/my-7-year-old-sister-and-i-singing-alive-by-krewella/UeBhTudbfS?t=s&n=1',\n            'md5': '5d4a52492d76f72712117ce6b0d98d08',\n            'info_dict': {\n                'id': 'UeBhTudbfS',\n                'ext': 'mp4',\n                'title': 'My 7 year old Sister and I singing \"Alive\" by Krewella',\n                'description': 'md5:40bcacb97796339f1690642c21d56f4a',\n                'thumbnail': r're:^http://frame\\.thestaticvube\\.com/snap/[0-9x]+/102265d5a9f-0f17-4f6b-5753-adf08484ee1e\\.jpg$',\n                'uploader': 'Seraina',\n                'timestamp': 1396492438,\n                'upload_date': '20140403',\n                'duration': 240.107,\n                'like_count': int,\n                'dislike_count': int,\n                'comment_count': int,\n                'categories': ['seraina', 'jessica', 'krewella', 'alive'],\n            },\n            'skip': 'Removed due to DMCA',\n        }, {\n            'url': 'http://vube.com/vote/Siren+Gene/0nmsMY5vEq?n=2&t=s',\n            'md5': '0584fc13b50f887127d9d1007589d27f',\n            'info_dict': {\n                'id': '0nmsMY5vEq',\n                'ext': 'mp4',\n                'title': 'Frozen - Let It Go Cover by Siren Gene',\n                'description': 'My rendition of \"Let It Go\" originally sung by Idina Menzel.',\n                'thumbnail': r're:^http://frame\\.thestaticvube\\.com/snap/[0-9x]+/10283ab622a-86c9-4681-51f2-30d1f65774af\\.jpg$',\n                'uploader': 'Siren',\n                'timestamp': 1395448018,\n                'upload_date': '20140322',\n                'duration': 221.788,\n                'like_count': int,\n                'dislike_count': int,\n                'comment_count': int,\n                'categories': ['let it go', 'cover', 'idina menzel', 'frozen', 'singing', 'disney', 'siren gene'],\n            },\n            'skip': 'Removed due to DMCA',\n        }\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        video = self._download_json(\n            'http://vube.com/t-api/v1/video/%s' % video_id, video_id, 'Downloading video JSON')\n\n        public_id = video['public_id']\n\n        formats = []\n\n        for media in video['media'].get('video', []) + video['media'].get('audio', []):\n            if media['transcoding_status'] != 'processed':\n                continue\n            fmt = {\n                'url': 'http://video.thestaticvube.com/video/%s/%s.mp4' % (media['media_resolution_id'], public_id),\n                'abr': int(media['audio_bitrate']),\n                'format_id': compat_str(media['media_resolution_id']),\n            }\n            vbr = int(media['video_bitrate'])\n            if vbr:\n                fmt.update({\n                    'vbr': vbr,\n                    'height': int(media['height']),\n                })\n            formats.append(fmt)\n\n        self._sort_formats(formats)\n\n        if not formats and video.get('vst') == 'dmca':\n            raise ExtractorError(\n                'This video has been removed in response to a complaint received under the US Digital Millennium Copyright Act.',\n                expected=True)\n\n        title = video['title']\n        description = video.get('description')\n        thumbnail = self._proto_relative_url(video.get('thumbnail_src'), scheme='http:')\n        uploader = video.get('user_alias') or video.get('channel')\n        timestamp = int_or_none(video.get('upload_time'))\n        duration = video['duration']\n        view_count = video.get('raw_view_count')\n        like_count = video.get('total_likes')\n        dislike_count = video.get('total_hates')\n\n        comments = video.get('comments')\n        comment_count = None\n        if comments is None:\n            comment_data = self._download_json(\n                'http://vube.com/api/video/%s/comment' % video_id,\n                video_id, 'Downloading video comment JSON', fatal=False)\n            if comment_data is not None:\n                comment_count = int_or_none(comment_data.get('total'))\n        else:\n            comment_count = len(comments)\n\n        categories = [tag['text'] for tag in video['tags']]\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'timestamp': timestamp,\n            'duration': duration,\n            'view_count': view_count,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'comment_count': comment_count,\n            'categories': categories,\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n)\nfrom ..utils import (\n    int_or_none,\n    ExtractorError,\n)\n\n\nclass VubeIE(InfoExtractor):\n    IE_NAME = 'vube'\n    IE_DESC = 'Vube.com'\n    _VALID_URL = r'https?://vube\\.com/(?:[^/]+/)+(?P<id>[\\da-zA-Z]{10})\\b'\n\n    _TESTS = [\n        {\n            'url': 'http://vube.com/trending/William+Wei/Y8NUZ69Tf7?t=s',\n            'md5': 'e7aabe1f8f1aa826b9e4735e1f9cee42',\n            'info_dict': {\n                'id': 'Y8NUZ69Tf7',\n                'ext': 'mp4',\n                'title': 'Best Drummer Ever [HD]',\n                'description': 'md5:2d63c4b277b85c2277761c2cf7337d71',\n                'thumbnail': r're:^https?://.*\\.jpg',\n                'uploader': 'William',\n                'timestamp': 1406876915,\n                'upload_date': '20140801',\n                'duration': 258.051,\n                'like_count': int,\n                'dislike_count': int,\n                'comment_count': int,\n                'categories': ['amazing', 'hd', 'best drummer ever', 'william wei', 'bucket drumming', 'street drummer', 'epic street drumming'],\n            },\n            'skip': 'Not accessible from Travis CI server',\n        }, {\n            'url': 'http://vube.com/Chiara+Grispo+Video+Channel/YL2qNPkqon',\n            'md5': 'db7aba89d4603dadd627e9d1973946fe',\n            'info_dict': {\n                'id': 'YL2qNPkqon',\n                'ext': 'mp4',\n                'title': 'Chiara Grispo - Price Tag by Jessie J',\n                'description': 'md5:8ea652a1f36818352428cb5134933313',\n                'thumbnail': r're:^http://frame\\.thestaticvube\\.com/snap/[0-9x]+/102e7e63057-5ebc-4f5c-4065-6ce4ebde131f\\.jpg$',\n                'uploader': 'Chiara.Grispo',\n                'timestamp': 1388743358,\n                'upload_date': '20140103',\n                'duration': 170.56,\n                'like_count': int,\n                'dislike_count': int,\n                'comment_count': int,\n                'categories': ['pop', 'music', 'cover', 'singing', 'jessie j', 'price tag', 'chiara grispo'],\n            },\n            'skip': 'Removed due to DMCA',\n        },\n        {\n            'url': 'http://vube.com/SerainaMusic/my-7-year-old-sister-and-i-singing-alive-by-krewella/UeBhTudbfS?t=s&n=1',\n            'md5': '5d4a52492d76f72712117ce6b0d98d08',\n            'info_dict': {\n                'id': 'UeBhTudbfS',\n                'ext': 'mp4',\n                'title': 'My 7 year old Sister and I singing \"Alive\" by Krewella',\n                'description': 'md5:40bcacb97796339f1690642c21d56f4a',\n                'thumbnail': r're:^http://frame\\.thestaticvube\\.com/snap/[0-9x]+/102265d5a9f-0f17-4f6b-5753-adf08484ee1e\\.jpg$',\n                'uploader': 'Seraina',\n                'timestamp': 1396492438,\n                'upload_date': '20140403',\n                'duration': 240.107,\n                'like_count': int,\n                'dislike_count': int,\n                'comment_count': int,\n                'categories': ['seraina', 'jessica', 'krewella', 'alive'],\n            },\n            'skip': 'Removed due to DMCA',\n        }, {\n            'url': 'http://vube.com/vote/Siren+Gene/0nmsMY5vEq?n=2&t=s',\n            'md5': '0584fc13b50f887127d9d1007589d27f',\n            'info_dict': {\n                'id': '0nmsMY5vEq',\n                'ext': 'mp4',\n                'title': 'Frozen - Let It Go Cover by Siren Gene',\n                'description': 'My rendition of \"Let It Go\" originally sung by Idina Menzel.',\n                'thumbnail': r're:^http://frame\\.thestaticvube\\.com/snap/[0-9x]+/10283ab622a-86c9-4681-51f2-30d1f65774af\\.jpg$',\n                'uploader': 'Siren',\n                'timestamp': 1395448018,\n                'upload_date': '20140322',\n                'duration': 221.788,\n                'like_count': int,\n                'dislike_count': int,\n                'comment_count': int,\n                'categories': ['let it go', 'cover', 'idina menzel', 'frozen', 'singing', 'disney', 'siren gene'],\n            },\n            'skip': 'Removed due to DMCA',\n        }\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        video = self._download_json(\n            'http://vube.com/t-api/v1/video/%s' % video_id, video_id, 'Downloading video JSON')\n\n        public_id = video['public_id']\n\n        formats = []\n\n        for media in video['media'].get('video', []) + video['media'].get('audio', []):\n            if media['transcoding_status'] != 'processed':\n                continue\n            fmt = {\n                'url': 'http://video.thestaticvube.com/video/%s/%s.mp4' % (media['media_resolution_id'], public_id),\n                'abr': int(media['audio_bitrate']),\n                'format_id': compat_str(media['media_resolution_id']),\n            }\n            vbr = int(media['video_bitrate'])\n            if vbr:\n                fmt.update({\n                    'vbr': vbr,\n                    'height': int(media['height']),\n                })\n            formats.append(fmt)\n\n        self._sort_formats(formats)\n\n        if not formats and video.get('vst') == 'dmca':\n            raise ExtractorError(\n                'This video has been removed in response to a complaint received under the US Digital Millennium Copyright Act.',\n                expected=True)\n\n        title = video['title']\n        description = video.get('description')\n        thumbnail = self._proto_relative_url(video.get('thumbnail_src'), scheme='http:')\n        uploader = video.get('user_alias') or video.get('channel')\n        timestamp = int_or_none(video.get('upload_time'))\n        duration = video['duration']\n        view_count = video.get('raw_view_count')\n        like_count = video.get('total_likes')\n        dislike_count = video.get('total_hates')\n\n        comments = video.get('comments')\n        comment_count = None\n        if comments is None:\n            comment_data = self._download_json(\n                'http://vube.com/api/video/%s/comment' % video_id,\n                video_id, 'Downloading video comment JSON', fatal=False)\n            if comment_data is not None:\n                comment_count = int_or_none(comment_data.get('total'))\n        else:\n            comment_count = len(comments)\n\n        categories = [tag['text'] for tag in video['tags']]\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'timestamp': timestamp,\n            'duration': duration,\n            'view_count': view_count,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'comment_count': comment_count,\n            'categories': categories,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vube.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vube.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}