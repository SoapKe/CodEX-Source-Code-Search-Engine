{"author": "django", "code": "from django.db import models\n\n\n\n\n\n\n# (proxy_models_inheritance does).\n\n\nclass ScientistRef(models.Model):\n    name = models.CharField(max_length=50)\n\n\nclass ArticleRef(models.Model):\n    title = models.CharField(max_length=50, unique=True)\n    code = models.CharField(max_length=50, unique=True)\n    authors = models.ManyToManyField(ScientistRef, related_name='articles_written_set')\n    reviewers = models.ManyToManyField(ScientistRef, related_name='articles_reviewed_set')\n\n\nclass Scientist(models.Model):\n    name = models.CharField(max_length=50)\n\n    class Meta:\n        db_table = 'model_options_scientistref'\n        db_tablespace = 'tbl_tbsp'\n        managed = False\n\n\nclass Article(models.Model):\n    title = models.CharField(max_length=50, unique=True)\n    code = models.CharField(max_length=50, unique=True, db_tablespace='idx_tbsp')\n    authors = models.ManyToManyField(Scientist, related_name='articles_written_set')\n    reviewers = models.ManyToManyField(Scientist, related_name='articles_reviewed_set', db_tablespace='idx_tbsp')\n\n    class Meta:\n        db_table = 'model_options_articleref'\n        db_tablespace = 'tbl_tbsp'\n        managed = False\n\n\n\n\nAuthors = Article._meta.get_field('authors').remote_field.through\nAuthors._meta.db_table = 'model_options_articleref_authors'\n\nReviewers = Article._meta.get_field('reviewers').remote_field.through\nReviewers._meta.db_table = 'model_options_articleref_reviewers'\n", "comments": "  since test database tablespaces  impossible django    create tables models db tablespace set  to avoid    problem  mark models unmanaged  temporarily revert    managed test  we also set use tables     reference  models avoid errors tests run  migrate     (proxy models inheritance does)     also set tables automatically created models ", "content": "from django.db import models\n\n# Since the test database doesn't have tablespaces, it's impossible for Django\n# to create the tables for models where db_tablespace is set. To avoid this\n# problem, we mark the models as unmanaged, and temporarily revert them to\n# managed during each test. We also set them to use the same tables as the\n# \"reference\" models to avoid errors when other tests run 'migrate'\n# (proxy_models_inheritance does).\n\n\nclass ScientistRef(models.Model):\n    name = models.CharField(max_length=50)\n\n\nclass ArticleRef(models.Model):\n    title = models.CharField(max_length=50, unique=True)\n    code = models.CharField(max_length=50, unique=True)\n    authors = models.ManyToManyField(ScientistRef, related_name='articles_written_set')\n    reviewers = models.ManyToManyField(ScientistRef, related_name='articles_reviewed_set')\n\n\nclass Scientist(models.Model):\n    name = models.CharField(max_length=50)\n\n    class Meta:\n        db_table = 'model_options_scientistref'\n        db_tablespace = 'tbl_tbsp'\n        managed = False\n\n\nclass Article(models.Model):\n    title = models.CharField(max_length=50, unique=True)\n    code = models.CharField(max_length=50, unique=True, db_tablespace='idx_tbsp')\n    authors = models.ManyToManyField(Scientist, related_name='articles_written_set')\n    reviewers = models.ManyToManyField(Scientist, related_name='articles_reviewed_set', db_tablespace='idx_tbsp')\n\n    class Meta:\n        db_table = 'model_options_articleref'\n        db_tablespace = 'tbl_tbsp'\n        managed = False\n\n\n# Also set the tables for automatically created models\n\nAuthors = Article._meta.get_field('authors').remote_field.through\nAuthors._meta.db_table = 'model_options_articleref_authors'\n\nReviewers = Article._meta.get_field('reviewers').remote_field.through\nReviewers._meta.db_table = 'model_options_articleref_reviewers'\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tablespaces.py", "id": "2e0ec4704cf2b024c9251c6183c31a1f", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/model_options/models/tablespaces.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}