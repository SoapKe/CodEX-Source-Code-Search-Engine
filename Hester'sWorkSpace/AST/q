
def search(self,qTree, hashTrees, weights,similarities,maxWeight):
        for w in qTree:
            if isinstance(w,tuple):
                find=False
                if not find and len(qTree[w])>0:
                    self.search(qTree[w],hashTrees,weights,similarities,maxWeight)

                if w[0] in list(weights.keys()):
                    for file in weights[w[0]]:
                        v=self.dict_get(hashTrees[file],w,None)
                        if v is not None:
                            find=True
                            if file in similarities:
                                similarities[file]+=w[0]/maxWeight
                            else:
                                similarities[file] = w[0]/maxWeight
                        else:
                            similarities[file]-=w[0]/maxWeight

def _real_extract(self, url):
    print('hhhhhh')
    display_id = self._match_id(url)
    webpage = self._download_webpage(
        url, display_id, 'Downloading player webpage')
    video_id = self._search_regex(
        r'data-ep="([^"]+)"', webpage, 'video ID')
    description = self._og_search_description(webpage)
    upload_date = unified_strdate(self._search_regex(
        r'class="[^"]*meta-item[^"]*air-time[^"]*">.*?<strong>([^<]+)</strong>', webpage, 'upload date', fatal=False))
    w = int_or_none(
        self._og_search_property('image:width', webpage, 'thumbnail width', fatal=False))
    thumbnail_h = int_or_none(
        self._og_search_property('image:height', webpage, 'thumbnail height', fatal=False))
    thumbnail = {
        'url': self._og_search_thumbnail(webpage),
    }

    config = self._parse_json(self._search_regex(
        r'episodePlayer\((\{.*?\}),\s*\{', webpage, 'sources'), video_id)

    if config.get('pGeo'):
        self.report_warning(
            'This content might not be available in your country due to copyright reasons')
    formats = [{
        'format_id': 'hls',
        'ext': 'mp4',
        'url': config['EpisodeVideoLink_HLS'],
    }]

    m = re.search(r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<play_path>.+)$', config['EpisodeVideoLink'])

    self._sort_formats(formats)

    return {
        'duration': int_or_none(config.get('VideoTime')),
        'upload_date': upload_date,
    }
